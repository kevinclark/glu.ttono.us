<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/stylesheets/rss.css" type="text/css"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Gluttonous: Specification classes make my code happy</title>
    <link>http://glu.ttono.us/articles/2005/12/19/specification-classes-make-my-code-happy</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description></description>
    <item>
      <title>Specification classes make my code happy</title>
      <description>&lt;p&gt;I recently re-stumbled-over &lt;a href="http://lunchroom.lunchboxsoftware.com/pages/specifications"&gt;Scott Baron&lt;/a&gt;&amp;#8217;s (htonl of the core team) post on &lt;a href="http://lunchroom.lunchboxsoftware.com/pages/specifications"&gt;Specification Classes&lt;/a&gt;. These little gems abstract your validation logic so your model validations aren&amp;#8217;t strongly coupled with other models. &lt;/p&gt;

&lt;p&gt;So, for example:&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m writing a ticket sales application. I need to make sure that when someone submits an order that the tickets that belong to that order are still avaliable. In this case we&amp;#8217;ve got an &lt;code&gt;order has_many :tickets&lt;/code&gt; relationship.&lt;/p&gt;

&lt;p&gt;How do I validate this? Well, I could override the &lt;code&gt;ActiveRecord::Base.validate&lt;/code&gt; method to look at all of the tickets and determine if they&amp;#8217;re avaliable, but thats messy. The AR validations are really about database conditions for data, not logic for when an order is acceptable.&lt;/p&gt;

&lt;p&gt;Spec classes to the rescue! I specify conditions for a proper order in my OrderSpecification class:&lt;/p&gt;

&lt;div class="typocode"&gt;&lt;pre&gt;&lt;code class="typocode_ruby "&gt;&lt;span class="keyword"&gt;class &lt;/span&gt;&lt;span class="class"&gt;OrderSpecification&lt;/span&gt;
  &lt;span class="ident"&gt;extend&lt;/span&gt; &lt;span class="constant"&gt;Specification&lt;/span&gt;

  &lt;span class="ident"&gt;satisfies&lt;/span&gt; &lt;span class="symbol"&gt;:all_tickets_avaliable&lt;/span&gt;&lt;span class="punct"&gt;,&lt;/span&gt; &lt;span class="punct"&gt;'&lt;/span&gt;&lt;span class="string"&gt;not all tickets are avaliable&lt;/span&gt;&lt;span class="punct"&gt;'&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; &lt;span class="punct"&gt;|&lt;/span&gt;&lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;|&lt;/span&gt;
    &lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;tickets&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;each&lt;/span&gt; &lt;span class="punct"&gt;{|&lt;/span&gt;&lt;span class="ident"&gt;t&lt;/span&gt;&lt;span class="punct"&gt;|&lt;/span&gt; &lt;span class="ident"&gt;t&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;reload&lt;/span&gt;&lt;span class="punct"&gt;}&lt;/span&gt;
    &lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;tickets&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;inject&lt;/span&gt;&lt;span class="punct"&gt;(&lt;/span&gt;&lt;span class="constant"&gt;true&lt;/span&gt;&lt;span class="punct"&gt;)&lt;/span&gt; &lt;span class="punct"&gt;{|&lt;/span&gt;&lt;span class="ident"&gt;avaliable&lt;/span&gt;&lt;span class="punct"&gt;,&lt;/span&gt; &lt;span class="ident"&gt;t&lt;/span&gt;&lt;span class="punct"&gt;|&lt;/span&gt; &lt;span class="ident"&gt;avaliable&lt;/span&gt; &lt;span class="punct"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="ident"&gt;t&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;avaliable?&lt;/span&gt; &lt;span class="punct"&gt;}&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following Scott&amp;#8217;s suggestions, I create a service class to be in charge of creating an order.&lt;/p&gt;

&lt;div class="typocode"&gt;&lt;pre&gt;&lt;code class="typocode_ruby "&gt;&lt;span class="keyword"&gt;class &lt;/span&gt;&lt;span class="class"&gt;OrderService&lt;/span&gt;
  &lt;span class="keyword"&gt;def &lt;/span&gt;&lt;span class="method"&gt;self.process_order&lt;/span&gt;&lt;span class="punct"&gt;(&lt;/span&gt;&lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;,&lt;/span&gt; &lt;span class="ident"&gt;user&lt;/span&gt;&lt;span class="punct"&gt;)&lt;/span&gt;
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="constant"&gt;false&lt;/span&gt; &lt;span class="keyword"&gt;unless&lt;/span&gt; &lt;span class="constant"&gt;OrderSpecification&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;passes_all?&lt;/span&gt;&lt;span class="punct"&gt;(&lt;/span&gt;&lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;)&lt;/span&gt;
    &lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;tickets&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;each&lt;/span&gt; &lt;span class="punct"&gt;{|&lt;/span&gt;&lt;span class="ident"&gt;ticket&lt;/span&gt;&lt;span class="punct"&gt;|&lt;/span&gt; &lt;span class="ident"&gt;ticket&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;avaliable&lt;/span&gt; &lt;span class="punct"&gt;=&lt;/span&gt; &lt;span class="constant"&gt;false&lt;/span&gt;&lt;span class="punct"&gt;;&lt;/span&gt; &lt;span class="ident"&gt;ticket&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;user_id&lt;/span&gt; &lt;span class="punct"&gt;=&lt;/span&gt; &lt;span class="ident"&gt;user&lt;/span&gt;&lt;span class="punct"&gt;}&lt;/span&gt;
    &lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;user_id&lt;/span&gt; &lt;span class="punct"&gt;=&lt;/span&gt; &lt;span class="ident"&gt;user&lt;/span&gt;
    &lt;span class="ident"&gt;order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;save&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, I use the service class to create my order in my OrdersController.&lt;/p&gt;

&lt;div class="typocode"&gt;&lt;pre&gt;&lt;code class="typocode_ruby "&gt;  &lt;span class="keyword"&gt;def &lt;/span&gt;&lt;span class="method"&gt;create&lt;/span&gt;
    &lt;span class="punct"&gt;....&lt;/span&gt;

    &lt;span class="attribute"&gt;@order&lt;/span&gt; &lt;span class="punct"&gt;=&lt;/span&gt; &lt;span class="ident"&gt;Order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;new&lt;/span&gt;&lt;span class="punct"&gt;(&lt;/span&gt;&lt;span class="ident"&gt;params&lt;/span&gt;&lt;span class="punct"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;:order&lt;/span&gt;&lt;span class="punct"&gt;])&lt;/span&gt;

    &lt;span class="attribute"&gt;@cart&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;tickets&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;each&lt;/span&gt; &lt;span class="punct"&gt;{|&lt;/span&gt;&lt;span class="ident"&gt;ticket&lt;/span&gt;&lt;span class="punct"&gt;|&lt;/span&gt; &lt;span class="attribute"&gt;@order&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;tickets&lt;/span&gt; &lt;span class="punct"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="ident"&gt;ticket&lt;/span&gt;&lt;span class="punct"&gt;}&lt;/span&gt;  

    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="constant"&gt;OrderService&lt;/span&gt;&lt;span class="punct"&gt;.&lt;/span&gt;&lt;span class="ident"&gt;process_order&lt;/span&gt;&lt;span class="punct"&gt;(&lt;/span&gt;&lt;span class="attribute"&gt;@order&lt;/span&gt;&lt;span class="punct"&gt;,&lt;/span&gt; &lt;span class="attribute"&gt;@session&lt;/span&gt;&lt;span class="punct"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;:user&lt;/span&gt;&lt;span class="punct"&gt;].&lt;/span&gt;&lt;span class="ident"&gt;id&lt;/span&gt;&lt;span class="punct"&gt;)&lt;/span&gt;
      &lt;span class="comment"&gt;# do stuff&lt;/span&gt;
    &lt;span class="keyword"&gt;else&lt;/span&gt;
      &lt;span class="comment"&gt;# do other stuff&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most excellent. Thanks Scott!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;I realize that I referenced the Specification class itself in my code above. See &lt;a href="http://lunchroom.lunchboxsoftware.com/pages/specifications"&gt;Scott&amp;#8217;s post&lt;/a&gt; for the code.&lt;/p&gt;</description>
      <pubDate>Mon, 19 Dec 2005 14:46:00 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:352027ff-6767-4c6f-b0f5-499397137bf2</guid>
      <author>kev</author>
      <link>http://glu.ttono.us/articles/2005/12/19/specification-classes-make-my-code-happy</link>
      <category>Coding</category>
      <category>Rails</category>
      <category>Ruby</category>
      <trackback:ping>http://glu.ttono.us/articles/trackback/152</trackback:ping>
    </item>
  </channel>
</rss>

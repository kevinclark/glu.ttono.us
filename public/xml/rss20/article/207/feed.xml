<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/stylesheets/rss.css" type="text/css"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Gluttonous: Rails Best Practices, Tips and Tricks</title>
    <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description></description>
    <item>
      <title>Rails Best Practices, Tips and Tricks</title>
      <description>&lt;p&gt;Last week I accepted a job with &lt;a href="http://mingle.com"&gt;Mingle.com&lt;/a&gt;. The work is exciting (all Rails) and the team is excellent. &lt;/p&gt;

&lt;p&gt;Because Rails is a young framework, I thought it would be helpful to write up what I consider best practices when coding with it both for my new coworkers and the web at large. Here&amp;#8217;s my current draft. Feel free to critique and comment. I&amp;#8217;m very open to suggestions.&lt;/p&gt;</description>
      <pubDate>Mon, 06 Feb 2006 20:32:00 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:b42a89cd-9d0e-449e-846e-860530815400</guid>
      <author>kev</author>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks</link>
      <category>Web Dev</category>
      <category>Coding</category>
      <category>Rails</category>
      <category>Ruby</category>
      <trackback:ping>http://glu.ttono.us/articles/trackback/207</trackback:ping>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Josh</title>
      <description>&lt;p&gt;I&amp;#8217;d be curious to hear your take on ActiveRBAC as an authentication system.&lt;/p&gt;</description>
      <pubDate>Thu, 13 Apr 2006 11:29:30 -0400</pubDate>
      <guid isPermaLink="false">urn:uuid:f2c8acfd-097c-4734-9afa-1c1d7c72b7aa</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-486</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Joe</title>
      <description>&lt;p&gt;I just tried signing up an existing user with LoginGenerator and got a &amp;#8220;Login has already been taken&amp;#8221; validation error. Is that what you mean by &amp;#8220;save an already existing user&amp;#8221; scrambles the password?&lt;/p&gt;</description>
      <pubDate>Tue, 11 Apr 2006 21:37:30 -0400</pubDate>
      <guid isPermaLink="false">urn:uuid:2b228661-b667-4865-ab9b-3343de6e7432</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-465</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Jordi Pradel</title>
      <description>&lt;p&gt;Great article!&lt;br&gt;
I would add Robert C. Martin&amp;#8217;s &amp;#8220;Agile Software Development&amp;#8221; as a suggested reading. It has a great chapter on DRY.&lt;/p&gt;</description>
      <pubDate>Tue, 14 Mar 2006 11:56:21 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:e65d550b-3eaf-4c35-af43-aaf8293f9add</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-275</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Kevin Clark</title>
      <description>&lt;p&gt;Carter:&lt;/p&gt;


	&lt;p&gt;&amp;#8220;The argument that there are too many different needs for pluggin X for pluggin X to be included in the trunk could really apply to just about any pluggin.&amp;#8221;&lt;/p&gt;


	&lt;p&gt;I agree. This is why plugins aren&amp;#8217;t generally included in the trunk. They are plugins.&lt;/p&gt;


	&lt;p&gt;I don&amp;#8217;t think it&amp;#8217;s unreasonable to have a standard login engine. I specifically say in this document which one I think should be standard. This, however, doesn&amp;#8217;t mean I think it should be included in the trunk. It has the same problems as pagination does in that it is too specific for use out of the box as you&amp;#8217;ll need to modify models and pages and that gets into configuration&amp;#8212;something that Rails avoids like the plague. Look at scaffolding. It is there, but you never go live with scaffolding, it is too specific. The whole point of plugins is so you can pick the one that works best for you and modify if you need. Login engines don&amp;#8217;t belong in core. Period.&lt;/p&gt;</description>
      <pubDate>Fri, 10 Mar 2006 20:53:36 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:209ea452-0a05-4bad-9a74-92add3560c58</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-265</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Carter</title>
      <description>&lt;p&gt;re: authentication&lt;/p&gt;


	&lt;p&gt;The argument that there are too many different needs for pluggin X for pluggin X to be included in the trunk could really apply to just about any pluggin.&lt;/p&gt;


	&lt;p&gt;I don&amp;#8217;t think it would be at all unreasonable to have a standard login / session authentication engine.&lt;/p&gt;


	&lt;p&gt;By default it could be a standard hashed password database.  It could have a lot more options under the hood (that is, if you need more than a &amp;#8220;standard&amp;#8221; authenticator, you should be working at more than a beginner level anyway) and this would do nothing to prevent other authentication engines from being used for even more specialized uses.&lt;/p&gt;


	&lt;p&gt;Authentication is a big problem, and people are right to be wary of cookie-cutter solutions.  But there should be an included and standard way of doing simple low-priority-security authentication for things like setting up a simple email-validated account for a public messageboard and other such &amp;#8220;shake n&amp;#8217; bake&amp;#8221; applications.&lt;/p&gt;


	&lt;p&gt;The whole point of Rails seems to be to make simple applications easy to write well, and make big applications easy to structure well.  A standard authenticator seems to me to be totally in line with this goal.&lt;/p&gt;


	&lt;p&gt;Personally I&amp;#8217;ve been using OpenID for my applications.  I&amp;#8217;m tired of having to register and reregister for every web application I use, so I&amp;#8217;m hoping to see this standard catch on, also, an openID consumer is trivially easy to implement, and it takes a lot of hassle and responsibility out of my hands.&lt;/p&gt;</description>
      <pubDate>Fri, 10 Mar 2006 17:03:33 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:8c294456-5702-495d-8099-e25c43f1936b</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-264</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Rich</title>
      <description>&lt;p&gt;Has anyone else tried using the latest release of ModelSecurity?&lt;/p&gt;


	&lt;p&gt;If so, have you tried using it together with acts_as_authenticated?&lt;/p&gt;


	&lt;p&gt;The design and usage of ModelSecurity looks like it deserves mention as a best practice for Rails.&lt;/p&gt;


	&lt;p&gt;Home&lt;/p&gt;


	&lt;p&gt;&lt;a&gt;http://perens.com/FreeSoftware/ModelSecurity/&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Tutorial&lt;/p&gt;


	&lt;p&gt;&lt;a&gt;http://perens.com/FreeSoftware/ModelSecurity/Tutorial.html&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Sat, 04 Mar 2006 17:44:56 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:ab04c6b5-15d8-484c-a7ab-6d0001f3c9a0</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-256</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Kevin Clark</title>
      <description>&lt;p&gt;Matt: The question of parenthesis really goes coder to coder. () aren&amp;#8217;t needed, but the general rule is that if there can be confusing, use parenthesis.&lt;/p&gt;


eg.
&lt;pre&gt;&lt;code&gt;
puts "Hi" # Doesn't really need parenthesis

# vs

render :text =&amp;gt; h("unsafe string")
# probably get a parse error without parenthesis.. 
# what should h be interpreted as without them?
&lt;/code&gt;&lt;/pre&gt;</description>
      <pubDate>Tue, 14 Feb 2006 18:09:11 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:056968f6-210e-401c-9e19-6993bd4e31ea</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-233</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by matt</title>
      <description>&lt;p&gt;I see people come to Rails from all sorts of other languages, all of them with their own format conventions.  Ruby goes to great length to be readable, and as a result makes it easy to be non-uniform.  Do you put () around every set of method attributes?&lt;/p&gt;


	&lt;p&gt;Is there a good Ruby document around that tries to establish coding guidelines?&lt;/p&gt;</description>
      <pubDate>Tue, 14 Feb 2006 13:51:04 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:f4e88652-149e-4142-b0b9-8ce96d4b1c35</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-228</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Kevin Clark</title>
      <description>&lt;p&gt;Dave:
I agree, it would be nice to have a &amp;#8220;best&amp;#8221; authentication plugin, but it still wouldn&amp;#8217;t belong in trunk ;) It&amp;#8217;s too specific.&lt;/p&gt;


	&lt;p&gt;Alex:
As for finding the which is best, I agree, it is entirely application and need specific. I suggest acts_as_authenticated because, in my experience, it is the easiest to modify to fill my needs.&lt;/p&gt;</description>
      <pubDate>Mon, 13 Feb 2006 12:43:30 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:ce0dce4e-3c92-43cf-82bd-1310dba70466</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-226</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Alex</title>
      <description>&lt;p&gt;In reference to Dave Welton&amp;#8217;s comments:&lt;/p&gt;


	&lt;p&gt;I think the problem is that &amp;#8220;which is best&amp;#8221; is very dependent on the specific requirements of the application.&lt;/p&gt;


	&lt;p&gt;For example, some applications will simply require that a user be logged in before they can use the application, others will have different levels of access and others may require fine grain control over permissions to perform tasks and access specific records.&lt;/p&gt;


	&lt;p&gt;The onyl way to fit every eventuality in to a &amp;#8220;which is best&amp;#8221; scenario is to have a solution that can handle every eventuality and yet be rediculously simple to implement for the more basic examples.&lt;/p&gt;</description>
      <pubDate>Mon, 13 Feb 2006 10:30:07 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:2add203d-5854-49d2-9e01-a1376f9074d9</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-225</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Dave Welton</title>
      <description>&lt;p&gt;One of the things that is driving rails uptake is that it just encapsulates a lot of good ways of doing things.&lt;/p&gt;


	&lt;p&gt;It would be nice if there were one good way of doing authentication/logins &amp;#8211; if there are several, new users like myself (who are, of coures, the least well placed to actually judge) are left wondering &amp;#8220;which is best?&amp;#8221;.  Hopefully the Rails guys will pick one, make sure it really is the best by investing some time in it, and include it.&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 16:21:24 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:0c2b6ca7-8de4-42cd-a341-ffc053c3979b</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-215</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Kevin Clark</title>
      <description>&lt;p&gt;Luke: Great comments. Selenium looks really exciting and I&amp;#8217;m looking to play with it in the near future.&lt;/p&gt;


	&lt;p&gt;Keep it up guys, lets hear some more of what you consider best practices. What am I missing?&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 12:44:47 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:f1f9ff64-2527-41d3-807d-6959ad49a25b</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-214</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Mike Pence</title>
      <description>&lt;p&gt;Dude! Congratulations on the new gig! Sweet!&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 09:56:57 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:2052c3cf-2657-404d-9756-f38ad28dc383</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-212</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Luke Redpath</title>
      <description>&lt;p&gt;Um, that code again&amp;#8230;;)&lt;/p&gt;


	&lt;p&gt;&lt;a&gt;http://pastebin.com/543128&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 07:14:23 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:1b214e22-84cd-48f4-a69c-67fc416acde8</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-211</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Luke Redpath</title>
      <description>&lt;p&gt;Another hint worth mentioning is refactor those tests as well as the production code.&lt;/p&gt;


	&lt;p&gt;You mention having at least one testcase per controller action, but I think a better way of looking at things is to have one testcase per fixture, with individual test methods for testing specific things.&lt;/p&gt;


	&lt;p&gt;For instance, to use an example by Dave Astels, you are writing a piece of software that is essentially a movie library. You have a movie container class called MovieList.&lt;/p&gt;


	&lt;p&gt;The first testcase would be an empty movie list. So your first testcase would probably be something like:&lt;/p&gt;


	&lt;p&gt;class EmptyMovieList &amp;lt; Test::Unit::TestCase
  def setup
    @list = MovieList.new
  end
end&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;def test_is_empty
  assert @list.empty?
end&lt;/code&gt;&lt;/pre&gt;


	&lt;ol&gt;
	&lt;li&gt;other test methods&lt;/li&gt;
	&lt;/ol&gt;


	&lt;p&gt;You would then have another testcase, OneMovieList, then ManyMovieList (this is probably a suitable amount of testcases at this point). Another cool thing about this form is that your test cases and test methods can read like specifications&amp;#8230;&amp;#8221;EmptyMovieList&amp;#8230;is empty&amp;#8221;. Which leads me on to my next point&amp;#8230;look into BDD instead of TDD, and rSpec:&lt;/p&gt;


	&lt;p&gt;&lt;a&gt;http://rspec.rubyforge.org/&lt;/a&gt;
&lt;a&gt;http://blog.daveastels.com/&lt;/a&gt;?p=53&lt;/p&gt;


	&lt;p&gt;So how do I translate the above into the Rails context? Lets say we have a blog controller with a post action. Two testcases immediately spring to mind. ValidPostTest and InvalidPostTest. I can&amp;#8217;t see any need to be more specific than that&amp;#8230;the controller should only care whether the post is valid or invalid and handle with an appropriate response. The specifics of why a post may or may not be invalid is down to the model and such finely grained tests (say, post without a title, post without a body etc.) form your model unit tests.&lt;/p&gt;


	&lt;p&gt;Hope this helps!&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 07:11:10 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:f1a3ff9e-c545-4e3f-9bb2-8ddf760ff897</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-210</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Luke Redpath</title>
      <description>&lt;p&gt;One of the mistakes I think Rails makes is its reference to &amp;#8220;functional&amp;#8221; tests when they are in reality, nothing more than unit tests for controllers/actions.&lt;/p&gt;


	&lt;p&gt;A better choice for real acceptance tests that test the application, not the code, is Selenium.&lt;/p&gt;


	&lt;p&gt;Now there is this:
&lt;a&gt;http://andthennothing.net/archives/2006/02/05/selenium-on-rails&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Using Selenium is easy.&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 07:00:34 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:7528715b-43c8-4fd9-b1fb-b324e6bf9f80</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-209</link>
    </item>
    <item>
      <title>"Rails Best Practices, Tips and Tricks" by Phil</title>
      <description>&lt;p&gt;I am always surprised that I don&amp;#8217;t see more people suggesting use of SQLite in development environments&amp;#8212;it just seems like a no-brainer to me.&lt;/p&gt;


	&lt;p&gt;One thing that would help is to explain exactly which gems are necessary, since the first time it can be a little confusing to choose between sqlite, sqlite3, sqlite3-ruby and sqlite-ruby. (I think you&amp;#8217;re supposed to choose the latest version of sqlite3-ruby, but I&amp;#8217;m not 100% sure.)&lt;/p&gt;</description>
      <pubDate>Tue, 07 Feb 2006 00:07:35 -0500</pubDate>
      <guid isPermaLink="false">urn:uuid:b3d3da92-6a20-4aa8-94bf-6747edb441f0</guid>
      <link>http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks#comment-208</link>
    </item>
  </channel>
</rss>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Gluttonous : Tormenting Your Tests with Heckle</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta content="32.867098, -117.211597" name="ICBM" />
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://glu.ttono.us/xml/rsd" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/Gluttonous" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/Gluttonous" />
  <script src="/javascripts/cookies.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/prototype.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/effects.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/typo.js?1155250443" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="/stylesheets/theme/azure.css?1215021856" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/user-styles.css?1155250443" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/theme/print.css?1215021856" media="print" rel="Stylesheet" type="text/css" />
  <link href='http://www.myopenid.com/server' rel='openid.server' />
  <link href='http://kevinclark.myopenid.com/' rel='openid.delegate' />
</head>

<body>
  <div id="container" class="clearfix">
      <div id="header">
        <div id="logo">
          <h1 id="sitename"><a href="/">Gluttonous</a></h1>
          <h2 id="subtitle"></h2>
        </div>
      </div>
      
      <div id="search"> <form action="/articles/search" id="sform" method="get">
 <label for="q">Live Search:</label><input type="text" id="q" name="q" value="" size="15" />
<img alt="Spinner-blue" id="search_spinner" src="/images/spinner-blue.gif?1155250442" style="display:none;" />
</form>
<script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('search-results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_spinner')}, onLoading:function(request){Element.show('search_spinner')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script></div>
      

      <div id="content" class="clearfix">
        <div id="main">
          <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="Tormenting Your Tests with Heckle"
    dc:identifier="http://glu.ttono.us/articles/2006/12/19/tormenting-your-tests-with-heckle"
    dc:description="Update: Ruby2Ruby is having gem propogation issues. Feel free to download the gem here directly and install via gem install ruby2ruby-1.1.2.gem.&lt;"
    dc:creator="kevin"
    dc:date="2006-12-20T17:38:44-05:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="/admin/content/edit/1274" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>Tormenting Your Tests with Heckle</h2>
  <p class="auth">Posted by kev
  <span class="typo_date" title="Tue, 19 Dec 2006 09:24:00 GMT">Tue, 19 Dec 2006 09:24:00 GMT</span></p>
  <div id="adsense">
  <script type="text/javascript"><!--
google_ad_client = "pub-1730274975094059";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
google_ad_channel ="";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "5189B5";
google_color_url = "000000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
  </div>
  <p><strong>Update</strong>: Ruby2Ruby is having gem propogation issues. Feel free to download the gem <a href="http://rubyforge.org/frs/download.php/15738/ruby2ruby-1.1.2.gem">here</a> directly and install via <code>gem install ruby2ruby-1.1.2.gem</code>.</p>

<p><strong>Update 2</strong>: We&#8217;ve found a bug in the loading that causes problems when you supply a method to Heckle. A bug fix has been checked into the repo and we&#8217;re preparing a release. Look for 1.1.1 soonish.</p>

<p><strong>Update 3</strong>: Ok, 1.1.1 is out the door. The gem server is syncing, so look for a new version this afternoon (12/20) with several bugs including the loading error fixed.</p>

<p>Yes, I know what you&#8217;re thinking. &#8220;Holy crap, Kevin posted for the first time in months! I thought he died, or got eaten by a corporate zombie, or set out on a epic adventure to find himself.&#8221; But hey, good things come to those who wait, right? </p>

<p>So, you&#8217;ve been waiting, and I&#8217;ve been writing <a href="http://rubyforge.org/projects/seattlerb/">Heckle</a>. It&#8217;s a good thing.</p>

<p>Heckle is a mutation tester. It modifies your code and runs your tests to make sure they fail. The idea is that if code can be changed and your tests don&#8217;t notice, either that code isn&#8217;t being covered or it doesn&#8217;t do anything.</p>

<p>It&#8217;s a little weird, I know, but I like to think about it as pen-testing. It&#8217;s like hiring a white-hat hacker to try to break into your server and making sure you detect it. You learn the most by trying to break things and watching the outcome.</p>

<p>Anyway, Heckle was inspired by <a href="http://jester.sourceforge.net/">Jester</a>, and <a href="http://blog.zenspider.com/">Ryan Davis</a> wrote a proof of concept at RubyConf. As he <a href="http://blog.zenspider.com/archives/2006/10/heckle_another_rubyconf_hack.html">notes</a>, I went a little nuts and much of the current implementation I rewrote that night or on the plane home.</p>

<p>You can install Heckle from Ruby Gems:</p>

<div class="typocode"><pre><code class="typocode_default ">  gem install heckle --include-dependencies </code></pre></div>

<p>Let&#8217;s take the new toy out for a test drive. </p><h3>Saying Hello to Branch Coverage</h3>

<p>Sometimes line based code coverage tools can&#8217;t catch gaps. For example, let&#8217;s say we&#8217;re working on some simple greeter system. Our initial code and tests look like this:</p>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="keyword">class </span><span class="class">Greeter</span>
    <span class="keyword">def </span><span class="method">initialize</span><span class="punct">(</span><span class="ident">person</span><span class="punct">)</span>
      <span class="attribute">@person</span> <span class="punct">=</span> <span class="ident">person</span>
    <span class="keyword">end</span>

    <span class="keyword">def </span><span class="method">greet</span>
      <span class="punct">&quot;</span><span class="string">Hi <span class="expr">#{@person}</span>!</span><span class="punct">&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span></code></pre></div>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="ident">require</span> <span class="punct">&quot;</span><span class="string">test/unit</span><span class="punct">&quot;</span>

  <span class="keyword">class </span><span class="class">TestGreeter</span> <span class="punct">&lt;</span> <span class="constant">Test</span><span class="punct">::</span><span class="constant">Unit</span><span class="punct">::</span><span class="constant">TestCase</span>
    <span class="keyword">def </span><span class="method">test_greet</span>
      <span class="attribute">@greeter</span> <span class="punct">=</span> <span class="constant">Greeter</span><span class="punct">.</span><span class="ident">new</span><span class="punct">('</span><span class="string">Kevin</span><span class="punct">')</span>
      <span class="ident">assert_equal</span> <span class="punct">'</span><span class="string">Hi Kevin!</span><span class="punct">',</span> <span class="attribute">@greeter</span><span class="punct">.</span><span class="ident">greet</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span></code></pre></div>

<p>Tests pass, and for this trivial example, coverage seems to be there. Running rcov confirms that every line in the <code>Greeter</code> class is being executed. But what happens when we decide to make the <code>person</code> attribute optional?</p>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="keyword">class </span><span class="class">Greeter</span>
    <span class="keyword">def </span><span class="method">initialize</span><span class="punct">(</span><span class="ident">person</span> <span class="punct">=</span> <span class="constant">nil</span><span class="punct">)</span>
      <span class="attribute">@person</span> <span class="punct">=</span> <span class="ident">person</span>
    <span class="keyword">end</span>

    <span class="keyword">def </span><span class="method">greet</span>
      <span class="attribute">@person</span><span class="punct">.</span><span class="ident">nil?</span> <span class="punct">?</span> <span class="punct">&quot;</span><span class="string">Hi there!</span><span class="punct">&quot;</span> <span class="punct">:</span> <span class="punct">&quot;</span><span class="string">Hi <span class="expr">#{@person}</span>!</span><span class="punct">&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span></code></pre></div>

<p>With this implementation, tests still pass and rcov still reports 100% coverage. Still, we know that a branch in that if isn&#8217;t being tested. Enter Heckle.</p>

<p>First let&#8217;s take a look at what Heckle tells us about these tests, and then we can go over how it does it. Usage information for Heckle is rather simple:</p>

<div class="typocode"><pre><code class="typocode_default ">  odysseus:~/code/heckle_demo kev$ heckle
  Usage: heckle class_name [method_name]
      -v, --verbose                    Loudly explain heckle run
      -t, --tests TEST_PATTERN         Location of tests (glob)
      -h, --help                       Show this message</code></pre></div>

<p>A simple run looks like this:</p>

<div class="typocode"><pre><code class="typocode_default ">  odysseus:~/code/heckle_demo kev$ heckle Greeter
  Initial tests pass. Let's rumble.

  **********************************************************************
  ***  Greeter#greet loaded with 3 possible mutations
  **********************************************************************

  3 mutations remaining...
  2 mutations remaining...
  1 mutations remaining...

  The following mutations didn't cause test failures:

  def greet
    if @person.nil? then
      &quot;z#\010]\021\r\e3&amp;TX\001z+\021fOy\016N6\t%F\acu\027\023w\024;}3Vcs&gt;\035\017&lt;Nc]ra\023V0\005 3UB\031]97rN1L\017\020TVJ\t\003k!l;\fA\036?[{lj;}ir2fPNaI\020\020w6$\eR*&quot;
    else
      &quot;Hi #{@person}!&quot;
    end
  end</code></pre></div>

<p>Heckle replaced the string, &#8220;Hi there!&#8221; with a bunch of random characters but the tests still passed. The situation where <code>@person</code> is nil was never tested. If we add a new test then Heckle should quiet down:</p>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="keyword">def </span><span class="method">test_greet_nobody</span>
    <span class="attribute">@greeter</span> <span class="punct">=</span> <span class="constant">Greeter</span><span class="punct">.</span><span class="ident">new</span>
    <span class="ident">assert_equal</span> <span class="punct">'</span><span class="string">Hi there!</span><span class="punct">',</span> <span class="attribute">@greeter</span><span class="punct">.</span><span class="ident">greet</span>
  <span class="keyword">end</span></code></pre></div>

<div class="typocode"><pre><code class="typocode_default ">  odysseus:~/code/heckle_demo kev$ heckle Greeter
  Initial tests pass. Let's rumble.

  **********************************************************************
  ***  Greeter#greet loaded with 3 possible mutations
  **********************************************************************

  3 mutations remaining...
  2 mutations remaining...
  1 mutations remaining...
  No mutants survived. Cool!</code></pre></div>

<h3>Wait.. What? How&#8217;d it do that?</h3>

<p>Heckle works by using the ParseTree and RubyToRuby libraries to grab the abstract syntax tree of methods, modify them, and evaluate the redefined method before running your tests. It can do all of this atomically, so each change can be seen individually. If you&#8217;d like to watch the action take place, you can supply the <code>-v</code> option. That last test run looks like this in verbose mode:</p>

<div class="typocode"><pre><code class="typocode_default ">  odysseus:~/code/heckle_demo kev$ heckle -v Greeter
  Loaded suite /usr/local/bin/heckle
  Started
  ..
  Finished in 0.000447 seconds.

  2 tests, 2 assertions, 0 failures, 0 errors
  Initial tests pass. Let's rumble.

  **********************************************************************
  ***  Greeter#greet loaded with 3 possible mutations
  **********************************************************************

  3 mutations remaining...
  Replacing Greeter#greet with:

  def greet
    if @person.nil? then
      &quot;uO i\032X#mcV&quot;
    else
      &quot;Hi #{@person}!&quot;
    end
  end
  Loaded suite /usr/local/bin/heckle
  Started
  .F
  Finished in 0.00812000000000002 seconds.

    1) Failure:
  test_greet_nobody(TestGreeter) [./test/test_greeter.rb:13]:
  &lt;&quot;Hi there!&quot;&gt; expected but was
  &lt;&quot;uO i\032X#mcV&quot;&gt;.

  2 tests, 2 assertions, 1 failures, 0 errors
  Tests failed -- this is good
  2 mutations remaining...
  Replacing Greeter#greet with:

  def greet
    if @person.nil? then
      &quot;Hi there!&quot;
    else
      &quot;Hi #{@person}\0204\026\036]7D\020#wC\010&amp;=-\004\017\t7.x\036\ap07hqO\f^\025\003+P\016]&lt;0M\vV`lbU\e&quot;
    end
  end
  Loaded suite /usr/local/bin/heckle
  Started
  F.
  Finished in 0.001194 seconds.

    1) Failure:
  test_greet(TestGreeter) [./test/test_greeter.rb:8]:
  &lt;&quot;Hi Kevin!&quot;&gt; expected but was
  &lt;&quot;Hi Kevin\0204\026\036]7D\020#wC\010&amp;=-\004\017\t7.x\036\ap07hqO\f^\025\003+P\016]&lt;0M\vV`lbU\e&quot;&gt;.

  2 tests, 2 assertions, 1 failures, 0 errors
  Tests failed -- this is good
  1 mutations remaining...
  Replacing Greeter#greet with:

  def greet
    if @person.nil? then
      &quot;Hi #{@person}!&quot;
    else
      &quot;Hi there!&quot;
    end
  end
  Loaded suite /usr/local/bin/heckle
  Started
  FF
  Finished in 0.001984 seconds.

    1) Failure:
  test_greet(TestGreeter) [./test/test_greeter.rb:8]:
  &lt;&quot;Hi Kevin!&quot;&gt; expected but was
  &lt;&quot;Hi there!&quot;&gt;.

    2) Failure:
  test_greet_nobody(TestGreeter) [./test/test_greeter.rb:13]:
  &lt;&quot;Hi there!&quot;&gt; expected but was
  &lt;&quot;Hi !&quot;&gt;.

  2 tests, 2 assertions, 2 failures, 0 errors
  Tests failed -- this is good
  No mutants survived. Cool!</code></pre></div>

<h3>FAQ</h3>

<h4>So what can Heckle.. um.. heckle?</h4>

<p>In version 1.1, Heckle will create random replacements for: Strings, Regexps, Symbols, Ranges, and the Numeric types (Fixnum, Float, Bignum). It will flip true to false and vice versa. It will also flip the branches on if and unless statements, as well as until and while statements.</p>

<h4>I used Jester and it was really slow. How&#8217;s Heckle?</h4>

<p>Really very fast. There&#8217;s no compile step for Heckle (as there is when you modify Java code with Jester), so the bottleneck is usually your tests. Fast tests mean fast heckling.</p>

<h4>What other options can Heckle take?</h4>

<p>The other significant option heckle takes is <code>--tests</code>. This flag is used to give a pattern (Glob format) which matches the tests that should be loaded. This defaults to &#8220;test/test_*.rb&#8221;. If you have lots of test files and really only care about a few for a certain class, you may want to specify them using <code>--tests</code> to speed things up.</p>

<p>Also, though I didn&#8217;t show it in the examples, Heckle can run against a single method by supplying it after the class name.</p>

<h4>If it modifies code, can&#8217;t bad things happen?</h4>

<p>Well, yes. Heckle could feasibly break things. It throws crap into your code on purpose. It flips <code>unless</code> and <code>while</code> loops so infinite loops will probably occur at some point. For the next release I&#8217;m planning to put in some sort of timeout to avoid that.</p>

<p>Additionally, know what your code is doing. If randomly changing a string is going to actually break things irrevocably in testing, you probably should be stubbing those dangerous methods (eg. You probably shouldn&#8217;t run Heckle against methods that really delete files during testing if it&#8217;s based on a string).</p>

<h4>But, does it work with Rails?</h4>

<p>You bet your sweet tests. However, you probably want to run against methods by hand since Rails tends to add a whole bunch of methods on the fly (with associations, validations and other helpers) that you wouldn&#8217;t want to heckle.</p>

<h4>Is there rSpec Support?</h4>

<p>I used Test::Unit for my examples, but I&#8217;ve been working with Aslak Hellesoy on the rSpec team to make sure support is there, and they&#8217;ve added a <code>--heckle</code> flag which should be there in the next version.</p>

<h4>Wait, so this is like&#8230; testing my tests?</h4>

<p>Basically. Cool, huh?</p>

<h3>Thanks</h3>

<p>A big thanks to Ryan Davis for starting me on this whirlwind, and to he and <a href="http://segment7.net/">Eric Hodel</a> for ParseTree and RubyToRuby. <a href="http://blog.aslakhellesoy.com/">Aslak Hellesoy</a> also deserves recognition for his help refactoring the reporting system and his work with rSpec integration.</p>

<p>I&#8217;m really excited about this project, and I think it has a lot to offer the testing world. I&#8217;m sure there are bugs, so feel free to report them at the <a href="http://rubyforge.org/tracker/?group_id=1513">rubyforge tracker</a>.</p>

<p><strong>Help spread the word by digging Heckle.</strong></p>

<script>
digg_url = 'http://digg.com/programming/Ruby_Unit_Test_Sadism_with_Heckle';
</script>

<script src="http://digg.com/api/diggthis.js"></script>
</div>
<p class="meta">
  Posted in <a href="/articles/category/hacks" rel="tag">Hacks</a>, <a href="/articles/category/testing" rel="tag">testing</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2006/12/19/tormenting-your-tests-with-heckle#comments">10 comments</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <ol class="comment-list" id="commentList">
  
    <li id="comment-1275"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1275'); }"  onmouseout="Element.hide('admin_comment_1275');" >
  <div id="admin_comment_1275" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1275', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1275&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1275" class="admintools">edit</a></div>
  <a name="comment-1275"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0ab6a5abab167b409f58d280dc59a229&amp;size=60" />
  <cite><strong><a href="http://www.faisal.com/">Faisal N. Jawdat</a></strong> </cite> said about 8 hours later:<br />
  <p>Does this rely on ruby2ruby 1.1.2?  gem doesn&#8217;t find it online, although it looks like one could manually download 1.1.1.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1275";
//--></script>
<!-- mmc mmid:1275 mmdate:2006-12-19 12:13:26 mmauthor:Faisal N. Jawdat -->
</li>
<li id="comment-1276"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1276'); }"  onmouseout="Element.hide('admin_comment_1276');" >
  <div id="admin_comment_1276" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1276', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1276&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1276" class="admintools">edit</a></div>
  <a name="comment-1276"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Kevin Clark</strong> </cite> said about 8 hours later:<br />
  <p>Sorry, looks like there was a problem with the ruby2ruby push last night. I&#8217;m investigating.</p>


	<p>Yes, this will work with ruby2ruby 1.1.1, but there are bug fixes in 1.1.2 that you should have as soon as you can get it.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1276";
//--></script>
<!-- mmc mmid:1276 mmdate:2006-12-19 12:26:09 mmauthor:Kevin Clark -->
</li>
<li id="comment-1277"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1277'); }"  onmouseout="Element.hide('admin_comment_1277');" >
  <div id="admin_comment_1277" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1277', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1277&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1277" class="admintools">edit</a></div>
  <a name="comment-1277"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0be0e4aa42aacd9a8a95c792de273ca7&amp;size=60" />
  <cite><strong><a href="http://blog.aslakhellesoy.com">Aslak Hellesøy</a></strong> </cite> said about 8 hours later:<br />
  <p>Great intro Kevin! See <a href="http://blog.aslakhellesoy.com/articles/2006/12/19/heckling-with-rspec">Heckle with RSpec</a> for the RSpec version.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1277";
//--></script>
<!-- mmc mmid:1277 mmdate:2006-12-19 12:28:54 mmauthor:Aslak Hellesøy -->
</li>
<li id="comment-1278" class="author_comment"  onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1278'); }"  onmouseout="Element.hide('admin_comment_1278');" >
  <div id="admin_comment_1278" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1278', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1278&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1278" class="admintools">edit</a></div>
  <a name="comment-1278"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Kevin Clark</strong> </cite> said about 9 hours later:<br />
  <p>Ruby2Ruby is having gem propagation issues. Feel free to download the gem directly (<a href="http://rubyforge.org/frs/download.php/15738/ruby2ruby-1.1.2.gem">http://rubyforge.org/frs/download.php/15738/ruby2ruby-1.1.2.gem</a>) and install via gem install ruby2ruby-1.1.2.gem.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1278";
//--></script>
<!-- mmc mmid:1278 mmdate:2006-12-19 13:02:35 mmauthor:Kevin Clark -->
</li>
<li id="comment-1279"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1279'); }"  onmouseout="Element.hide('admin_comment_1279');" >
  <div id="admin_comment_1279" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1279', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1279&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1279" class="admintools">edit</a></div>
  <a name="comment-1279"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=507ad9765784506b94461181f4d31d9a&amp;size=60" />
  <cite><strong><a href="http://blog.gorgorg.org">Laurel Fan</a></strong> </cite> said about 9 hours later:<br />
  <p>Ha!  This is so cool! (except for the crashing on half of my classes part :))</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1279";
//--></script>
<!-- mmc mmid:1279 mmdate:2006-12-19 13:29:39 mmauthor:Laurel Fan -->
</li>
<li id="comment-1280"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1280'); }"  onmouseout="Element.hide('admin_comment_1280');" >
  <div id="admin_comment_1280" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1280', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1280&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1280" class="admintools">edit</a></div>
  <a name="comment-1280"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Kevin Clark</strong> </cite> said about 9 hours later:<br />
  <p>Laurel: Thanks for the bug reports earlier! Keep it up as you find them.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1280";
//--></script>
<!-- mmc mmid:1280 mmdate:2006-12-19 13:45:09 mmauthor:Kevin Clark -->
</li>
<li id="comment-1281"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1281'); }"  onmouseout="Element.hide('admin_comment_1281');" >
  <div id="admin_comment_1281" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1281', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1281&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1281" class="admintools">edit</a></div>
  <a name="comment-1281"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Klondike</strong> </cite> said about 10 hours later:<br />
  <p>I hope we can look forward to more innovations from the magical team at Powerset.  If you&#8217;re a search engine, you better get ready to get rocked.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1281";
//--></script>
<!-- mmc mmid:1281 mmdate:2006-12-19 14:48:08 mmauthor:Klondike -->
</li>
<li id="comment-1282"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1282'); }"  onmouseout="Element.hide('admin_comment_1282');" >
  <div id="admin_comment_1282" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1282', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1282&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1282" class="admintools">edit</a></div>
  <a name="comment-1282"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>floyd</strong> </cite> said about 10 hours later:<br />
  <p>Yes, cool.  But you know what would be cooler?  A way to test these test tests.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1282";
//--></script>
<!-- mmc mmid:1282 mmdate:2006-12-19 14:50:45 mmauthor:floyd -->
</li>
<li id="comment-1283"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1283'); }"  onmouseout="Element.hide('admin_comment_1283');" >
  <div id="admin_comment_1283" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1283', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1283&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1283" class="admintools">edit</a></div>
  <a name="comment-1283"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Klondike</strong> </cite> said about 10 hours later:<br />
  <p>I don&#8217;t understand floyd&#8212;would a program like that be testable?</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1283";
//--></script>
<!-- mmc mmid:1283 mmdate:2006-12-19 14:51:57 mmauthor:Klondike -->
</li>
<li id="comment-1284" class="author_comment"  onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1284'); }"  onmouseout="Element.hide('admin_comment_1284');" >
  <div id="admin_comment_1284" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1284', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1284&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1274/edit/1284" class="admintools">edit</a></div>
  <a name="comment-1284"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Kevin Clark</strong> </cite> said about 12 hours later:<br />
  <p>Heckle will soon be able to heckle itself, if that&#8217;s what you&#8217;re looking for. It wasn&#8217;t able to previously because of a bug in ruby2ruby or ParseTree (I don&#8217;t recall) which has since been fixed.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1284";
//--></script>
<!-- mmc mmid:1284 mmdate:2006-12-19 16:07:31 mmauthor:Kevin Clark -->
</li>

  
  </ol>


<p class="postmetadata alt">
  <small>
  <a href="http://glu.ttono.us/xml/rss20/article/1274/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>

  <p>Comments are disabled</p>

<script type="text/javascript"><!--
if(!mmposts){var mmposts=[];}mmposts[mmposts.length]="1274";
//--></script>
<!-- mmp mmid:1274 mmdate:2006-12-19 05:23:27 mmurl:/articles/2006/12/19/tormenting-your-tests-with-heckle mmtitle:Tormenting Your Tests with Heckle -->
<script src="http://feeds.feedburner.com/~s/Gluttonous?i=http://glu.ttono.us/articles/2006/12/19/tormenting-your-tests-with-heckle" type="text/javascript" charset="utf-8"></script>

          <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
        </div>
        
        <div id="sidebar">
          
            <div id="search-results"></div>
            
              
      
<div class="sidebar-node">
  <h3>About</h3>
My name is Kevin Clark. I'm a <a href="http://ruby-lang.org">Ruby</a> hacker making awesome things at <a href="http://powerset.com">Powerset</a> in San Francisco.

</div>


      
<div class="sidebar-node">
  <h3>Understanding</h3>
<a href="http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols">Ruby Symbols</a><br />
<a href="http://glu.ttono.us/articles/2005/09/05/environments-in-rails-0-13-1">Environments in Rails 0.13.1</a><br />
<a href="http://glu.ttono.us/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a><br />
<a href="http://glu.ttono.us/articles/2005/10/30/why-and-how-ruby-and-rails-unit-testing">Ruby (and Rails) Unit Testing</a><br />
<a href="http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks">Rails Best Practices, Tips and Tricks</a><br />
<a href="http://glu.ttono.us/articles/2006/03/21/rails-for-designers">Rails for Designers</a><br />
<a href="http://glu.ttono.us/articles/2006/05/22/guide-environments-in-rails-1-1">Environments in Rails 1.1</a><br />
<a href="http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts">Test Driven RJS with ARTS</a>

</div>


      
<div class="sidebar-node">
  <h3>Cheat Sheets</h3>
<a href="http://glu.ttono.us/articles/2006/05/22/configuring-rails-environments-the-cheat-sheet">Configuring Rails Environments</a>

</div>


      
<div class="sidebar-node">
  <h3>Categories</h3>
<ul id="categories">
  
  <li><a href="/articles/category/web-dev">Web Dev</a> <em>(14)</em></li>
  
  
  <li><a href="/articles/category/coding">Coding</a> <em>(37)</em></li>
  
  
  <li><a href="/articles/category/rails">Rails</a> <em>(74)</em></li>
  
  
  <li><a href="/articles/category/op-ed">Op-Ed</a> <em>(7)</em></li>
  
  
  <li><a href="/articles/category/reviews">Reviews</a> <em>(3)</em></li>
  
  
  <li><a href="/articles/category/musings">Musings</a> <em>(18)</em></li>
  
  
  <li><a href="/articles/category/ruby">Ruby</a> <em>(69)</em></li>
  
  
  <li><a href="/articles/category/hacks">Hacks</a> <em>(22)</em></li>
  
  
  <li><a href="/articles/category/sdrug">sd.rb</a> <em>(10)</em></li>
  
  
  <li><a href="/articles/category/testing">testing</a> <em>(17)</em></li>
  
  
  <li><a href="/articles/category/documentation">documentation</a> <em>(6)</em></li>
  
  
  <li><a href="/articles/category/sightings">sightings</a> <em>(19)</em></li>
  
  
  <li><a href="/articles/category/guides">guides</a> <em>(8)</em></li>
  
  
  <li><a href="/articles/category/cheat-sheets">cheat sheets</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/business">business</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/summer-of-code">summer of code</a> <em>(5)</em></li>
  
</ul>


</div>


      
<div class="sidebar-node">
  <h3></h3>
<a href="http://feeds.feedburner.com/Gluttonous"><img src="http://feeds.feedburner.com/~fc/Gluttonous?bg=5189b5&amp;fg=333333&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>

</div>


      
<div class="sidebar-node">
  <h3></h3>
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->


</div>


  


            
            
            <a href="http://typo.leetsoft.com/" class="powered"><img alt="Powered" src="/images/powered.gif?1155250442" /></a>
            </div>

            <br clear="all" />
      </div>
      <div id="footer">
        <ul>
          <li><a href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0</a></li>
          <li><a href="http://jigsaw.w3.org/css-validator/validator?uri=http://glu.ttono.us/">Valid CSS</a></li>
        </ul>
      </div>
  </div>
<script type="text/javascript" src="http://tracker.measuremap.com/a/562"></script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-89073-1";
urchinTracker();
</script>
</body>
</html>


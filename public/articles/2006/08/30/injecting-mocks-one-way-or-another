<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Gluttonous : Injecting Mocks (one way or another)</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta content="32.867098, -117.211597" name="ICBM" />
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://glu.ttono.us/xml/rsd" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/Gluttonous" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/Gluttonous" />
  <script src="/javascripts/cookies.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/prototype.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/effects.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/typo.js?1155250443" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="/stylesheets/theme/azure.css?1215021856" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/user-styles.css?1155250443" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/theme/print.css?1215021856" media="print" rel="Stylesheet" type="text/css" />
  <link href='http://www.myopenid.com/server' rel='openid.server' />
  <link href='http://kevinclark.myopenid.com/' rel='openid.delegate' />
</head>

<body>
  <div id="container" class="clearfix">
      <div id="header">
        <div id="logo">
          <h1 id="sitename"><a href="/">Gluttonous</a></h1>
          <h2 id="subtitle"></h2>
        </div>
      </div>
      
      <div id="search"> <form action="/articles/search" id="sform" method="get">
 <label for="q">Live Search:</label><input type="text" id="q" name="q" value="" size="15" />
<img alt="Spinner-blue" id="search_spinner" src="/images/spinner-blue.gif?1155250442" style="display:none;" />
</form>
<script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('search-results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_spinner')}, onLoading:function(request){Element.show('search_spinner')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script></div>
      

      <div id="content" class="clearfix">
        <div id="main">
          <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="Injecting Mocks (one way or another)"
    dc:identifier="http://glu.ttono.us/articles/2006/08/30/injecting-mocks-one-way-or-another"
    dc:description="I&amp;#8217;ve been playing a lot with mocks lately (and I&amp;#8217;m a bit post happy today) so I thought I&amp;#8217;d show off a bit of code that was useful in a patch in RailTies. Sometimes methods a"
    dc:creator="kevin"
    dc:date="2006-08-30T17:17:47-04:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="/admin/content/edit/1040" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>Injecting Mocks (one way or another)</h2>
  <p class="auth">Posted by kev
  <span class="typo_date" title="Wed, 30 Aug 2006 21:15:00 GMT">Wed, 30 Aug 2006 21:15:00 GMT</span></p>
  <div id="adsense">
  <script type="text/javascript"><!--
google_ad_client = "pub-1730274975094059";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
google_ad_channel ="";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "5189B5";
google_color_url = "000000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
  </div>
  <p>I&#8217;ve been playing a lot with mocks lately (and I&#8217;m a bit post happy today) so I thought I&#8217;d show off a bit of code that was useful in a <a href="http://dev.rubyonrails.org/ticket/5970">patch</a> in RailTies.</p>

<p>Sometimes methods are hard to mock. They aren&#8217;t calling actions on some object you can replace with a mock or the API was designed so it&#8217;s hard to inject the mock in the first place.</p>

<p>This bit of code lets you intercept a method call and redirect it to a mock object of your choosing:</p>

<div class="typocode"><pre><code class="typocode_ruby ">  
  <span class="comment"># The multiple method form</span>
  <span class="keyword">def </span><span class="method">delegate_methods_to_mock!</span><span class="punct">(</span><span class="ident">klass</span><span class="punct">,</span> <span class="punct">*</span><span class="ident">methods</span><span class="punct">)</span>
    <span class="ident">methods</span><span class="punct">.</span><span class="ident">each</span> <span class="punct">{|</span><span class="ident">m</span><span class="punct">|</span> <span class="ident">redefine_method_using_mock!</span> <span class="ident">klass</span><span class="punct">,</span> <span class="ident">m</span> <span class="punct">}</span>
    <span class="keyword">yield</span>
    <span class="ident">methods</span><span class="punct">.</span><span class="ident">each</span> <span class="punct">{|</span><span class="ident">m</span><span class="punct">|</span> <span class="ident">reset_method_using_mock!</span> <span class="ident">klass</span><span class="punct">,</span> <span class="ident">m</span> <span class="punct">}</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">delegate_method_to_mock!</span><span class="punct">(</span><span class="ident">klass</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">)</span>
    <span class="ident">redefine_method_using_mock!</span> <span class="ident">klass</span><span class="punct">,</span> <span class="ident">method</span>
    <span class="keyword">yield</span>
    <span class="ident">reset_method_using_mock!</span> <span class="ident">klass</span><span class="punct">,</span> <span class="ident">method</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">redefine_method_using_mock!</span><span class="punct">(</span><span class="ident">klass</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">)</span>
    <span class="ident">klass</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="symbol">:attr_writer</span><span class="punct">,</span> <span class="symbol">:mock</span><span class="punct">)</span> <span class="keyword">unless</span> <span class="ident">klass</span><span class="punct">.</span><span class="ident">respond_to?</span> <span class="symbol">:mock=</span>

    <span class="ident">klass</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="symbol">:alias_method</span><span class="punct">,</span> <span class="punct">&quot;</span><span class="string">nonmocked_<span class="expr">#{method.to_s}</span></span><span class="punct">&quot;,</span> <span class="ident">method</span><span class="punct">.</span><span class="ident">to_s</span><span class="punct">)</span> <span class="keyword">unless</span> <span class="ident">klass</span><span class="punct">.</span><span class="ident">respond_to?</span> <span class="punct">&quot;</span><span class="string">nonmocked_<span class="expr">#{method.to_s}</span></span><span class="punct">&quot;</span>

    <span class="ident">klass</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="symbol">:define_method</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">,</span> 
      <span class="constant">Proc</span><span class="punct">.</span><span class="ident">new</span> <span class="punct">{|*</span><span class="ident">args</span><span class="punct">|</span>
        <span class="attribute">@mock</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="ident">method</span><span class="punct">,</span> <span class="punct">*</span><span class="ident">args</span><span class="punct">)</span>
      <span class="punct">}</span>
    <span class="punct">)</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">reset_method_using_mock!</span><span class="punct">(</span><span class="ident">klass</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">)</span>
    <span class="ident">klass</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="symbol">:remove_method</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">)</span>
    <span class="ident">klass</span><span class="punct">.</span><span class="ident">send</span><span class="punct">(</span><span class="symbol">:alias_method</span><span class="punct">,</span> <span class="ident">method</span><span class="punct">,</span> <span class="punct">&quot;</span><span class="string">nonmocked_<span class="expr">#{method.to_s}</span></span><span class="punct">&quot;)</span>
  <span class="keyword">end</span></code></pre></div>

<p>So then we use it like:</p>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="keyword">def </span><span class="method">test_process_exit</span>
    <span class="ident">delegate_methods_to_mock!</span><span class="punct">(</span><span class="constant">RailsFCGIHandler</span><span class="punct">,</span> <span class="symbol">:close_connection</span><span class="punct">)</span> <span class="keyword">do</span>
      <span class="ident">fcgi</span> <span class="punct">=</span> <span class="ident">flexmock</span><span class="punct">()</span>
      <span class="ident">fcgi</span><span class="punct">.</span><span class="ident">should_receive</span><span class="punct">(</span><span class="symbol">:close_connection</span><span class="punct">)</span>
      <span class="attribute">@handler</span><span class="punct">.</span><span class="ident">mock</span> <span class="punct">=</span> <span class="ident">fcgi</span>
      <span class="attribute">@handler</span><span class="punct">.</span><span class="ident">stubs</span><span class="punct">(</span><span class="symbol">:when_ready</span><span class="punct">).</span><span class="ident">returns</span><span class="punct">(</span><span class="symbol">:exit</span><span class="punct">)</span>
      <span class="attribute">@handler</span><span class="punct">.</span><span class="ident">process!</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span></code></pre></div>

<p>What happens is that an accessor is placed on the object in question and the method you want the mock to intercept is redirected to call on the mock instead&#8230; so it goes like this:</p>

<p>I call someobject.blah(1,2,3) which would normally call someobject.a(1,2,3) (may be a protected method) but instead we redefine a to call @mock.a(1,2,3) so we can register the call.</p>

<p>I&#8217;m not entirely sure if this is the best way to handle it but it seems to be working for my needs at the moment.</p>
</div>
<p class="meta">
  Posted in <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>, <a href="/articles/category/testing" rel="tag">testing</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2006/08/30/injecting-mocks-one-way-or-another#comments">3 comments</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <ol class="comment-list" id="commentList">
  
    <li id="comment-1053"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1053'); }"  onmouseout="Element.hide('admin_comment_1053');" >
  <div id="admin_comment_1053" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1053', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1053&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1040/edit/1053" class="admintools">edit</a></div>
  <a name="comment-1053"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=974f552a1f3c8fb88671ce6932ad9384&amp;size=60" />
  <cite><strong><a href="http://rubyonrailsblog.com/">Rails</a></strong> </cite> said about 3 hours later:<br />
  <p>Excellent explanation here for the Mock injection. I&#8217;m also pretty sure there&#8217;s other ways of handling that but nothing springs to mind off the top&#8230;</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1053";
//--></script>
<!-- mmc mmid:1053 mmdate:2006-08-30 19:58:38 mmauthor:Rails -->
</li>
<li id="comment-1068"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1068'); }"  onmouseout="Element.hide('admin_comment_1068');" >
  <div id="admin_comment_1068" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1068', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1068&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1040/edit/1068" class="admintools">edit</a></div>
  <a name="comment-1068"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=82a61255b4090da7d3619f870b0794dc&amp;size=60" />
  <cite><strong><a href="http://blog.floehopper.org">James Mead</a></strong> </cite> said about 13 hours later:<br />
  <p>This looks very similar to early versions of the Stubba component of <a href="http://mocha.rubyforge.org">Mocha</a>. We also started off using blocks, but found the syntax quickly becomes less readable when you want to mock multiple methods, or even multiple methods on multiple classes &#8211; this is why I moved to using the TestCase teardown to revert classes back to their original definition. Another evolution of Mocha was to add the &#8220;expects&#8221; and &#8220;stubs&#8221; methods to the Object class to make the tests even more readable.</p>


	<p>If I&#8217;m not mistaken, your example above includes use of Mocha does it not?</p>


<pre><code>  @handler.stubs(:when_ready).returns(:exit)</code></pre>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1068";
//--></script>
<!-- mmc mmid:1068 mmdate:2006-08-31 06:23:10 mmauthor:James Mead -->
</li>
<li id="comment-1076" class="author_comment"  onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1076'); }"  onmouseout="Element.hide('admin_comment_1076');" >
  <div id="admin_comment_1076" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1076', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1076&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1040/edit/1076" class="admintools">edit</a></div>
  <a name="comment-1076"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Kevin Clark</strong> </cite> said about 19 hours later:<br />
  <p>James,
It does indeed. That&#8217;s why I contacted you about the licensing.</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1076";
//--></script>
<!-- mmc mmid:1076 mmdate:2006-08-31 12:42:59 mmauthor:Kevin Clark -->
</li>

  
  </ol>


<p class="postmetadata alt">
  <small>
  <a href="http://glu.ttono.us/xml/rss20/article/1040/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>

  <p>Comments are disabled</p>

<script type="text/javascript"><!--
if(!mmposts){var mmposts=[];}mmposts[mmposts.length]="1040";
//--></script>
<!-- mmp mmid:1040 mmdate:2006-08-30 17:16:30 mmurl:/articles/2006/08/30/injecting-mocks-one-way-or-another mmtitle:Injecting Mocks (one way or another) -->
<script src="http://feeds.feedburner.com/~s/Gluttonous?i=http://glu.ttono.us/articles/2006/08/30/injecting-mocks-one-way-or-another" type="text/javascript" charset="utf-8"></script>

          <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
        </div>
        
        <div id="sidebar">
          
            <div id="search-results"></div>
            
              
      
<div class="sidebar-node">
  <h3>About</h3>
My name is Kevin Clark. I'm a <a href="http://ruby-lang.org">Ruby</a> hacker making awesome things at <a href="http://powerset.com">Powerset</a> in San Francisco.

</div>


      
<div class="sidebar-node">
  <h3>Understanding</h3>
<a href="http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols">Ruby Symbols</a><br />
<a href="http://glu.ttono.us/articles/2005/09/05/environments-in-rails-0-13-1">Environments in Rails 0.13.1</a><br />
<a href="http://glu.ttono.us/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a><br />
<a href="http://glu.ttono.us/articles/2005/10/30/why-and-how-ruby-and-rails-unit-testing">Ruby (and Rails) Unit Testing</a><br />
<a href="http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks">Rails Best Practices, Tips and Tricks</a><br />
<a href="http://glu.ttono.us/articles/2006/03/21/rails-for-designers">Rails for Designers</a><br />
<a href="http://glu.ttono.us/articles/2006/05/22/guide-environments-in-rails-1-1">Environments in Rails 1.1</a><br />
<a href="http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts">Test Driven RJS with ARTS</a>

</div>


      
<div class="sidebar-node">
  <h3>Cheat Sheets</h3>
<a href="http://glu.ttono.us/articles/2006/05/22/configuring-rails-environments-the-cheat-sheet">Configuring Rails Environments</a>

</div>


      
<div class="sidebar-node">
  <h3>Categories</h3>
<ul id="categories">
  
  <li><a href="/articles/category/web-dev">Web Dev</a> <em>(14)</em></li>
  
  
  <li><a href="/articles/category/coding">Coding</a> <em>(37)</em></li>
  
  
  <li><a href="/articles/category/rails">Rails</a> <em>(74)</em></li>
  
  
  <li><a href="/articles/category/op-ed">Op-Ed</a> <em>(7)</em></li>
  
  
  <li><a href="/articles/category/reviews">Reviews</a> <em>(3)</em></li>
  
  
  <li><a href="/articles/category/musings">Musings</a> <em>(18)</em></li>
  
  
  <li><a href="/articles/category/ruby">Ruby</a> <em>(69)</em></li>
  
  
  <li><a href="/articles/category/hacks">Hacks</a> <em>(22)</em></li>
  
  
  <li><a href="/articles/category/sdrug">sd.rb</a> <em>(10)</em></li>
  
  
  <li><a href="/articles/category/testing">testing</a> <em>(17)</em></li>
  
  
  <li><a href="/articles/category/documentation">documentation</a> <em>(6)</em></li>
  
  
  <li><a href="/articles/category/sightings">sightings</a> <em>(19)</em></li>
  
  
  <li><a href="/articles/category/guides">guides</a> <em>(8)</em></li>
  
  
  <li><a href="/articles/category/cheat-sheets">cheat sheets</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/business">business</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/summer-of-code">summer of code</a> <em>(5)</em></li>
  
</ul>


</div>


      
<div class="sidebar-node">
  <h3></h3>
<a href="http://feeds.feedburner.com/Gluttonous"><img src="http://feeds.feedburner.com/~fc/Gluttonous?bg=5189b5&amp;fg=333333&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>

</div>


      
<div class="sidebar-node">
  <h3></h3>
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->


</div>


  


            
            
            <a href="http://typo.leetsoft.com/" class="powered"><img alt="Powered" src="/images/powered.gif?1155250442" /></a>
            </div>

            <br clear="all" />
      </div>
      <div id="footer">
        <ul>
          <li><a href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0</a></li>
          <li><a href="http://jigsaw.w3.org/css-validator/validator?uri=http://glu.ttono.us/">Valid CSS</a></li>
        </ul>
      </div>
  </div>
<script type="text/javascript" src="http://tracker.measuremap.com/a/562"></script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-89073-1";
urchinTracker();
</script>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Gluttonous : Mocking Models</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta content="32.867098, -117.211597" name="ICBM" />
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://glu.ttono.us/xml/rsd" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/Gluttonous" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/Gluttonous" />
  <script src="/javascripts/cookies.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/prototype.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/effects.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/typo.js?1155250443" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="/stylesheets/theme/azure.css?1215021856" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/user-styles.css?1155250443" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/theme/print.css?1215021856" media="print" rel="Stylesheet" type="text/css" />
  <link href='http://www.myopenid.com/server' rel='openid.server' />
  <link href='http://kevinclark.myopenid.com/' rel='openid.delegate' />
</head>

<body>
  <div id="container" class="clearfix">
      <div id="header">
        <div id="logo">
          <h1 id="sitename"><a href="/">Gluttonous</a></h1>
          <h2 id="subtitle"></h2>
        </div>
      </div>
      
      <div id="search"> <form action="/articles/search" id="sform" method="get">
 <label for="q">Live Search:</label><input type="text" id="q" name="q" value="" size="15" />
<img alt="Spinner-blue" id="search_spinner" src="/images/spinner-blue.gif?1155250442" style="display:none;" />
</form>
<script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('search-results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_spinner')}, onLoading:function(request){Element.show('search_spinner')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script></div>
      

      <div id="content" class="clearfix">
        <div id="main">
          <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="Mocking Models"
    dc:identifier="http://glu.ttono.us/articles/2006/09/02/mocking-models"
    dc:description="Today I decided to see how much of the test code in my current side project I could rip fixtures out of. At the same time I could see what kind of speed increase I got from staying away from the database. Model tests seem to be the most straight forward"
    dc:creator="kevin"
    dc:date="2006-09-02T19:31:39-04:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="/admin/content/edit/1103" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>Mocking Models</h2>
  <p class="auth">Posted by kev
  <span class="typo_date" title="Sat, 02 Sep 2006 23:30:00 GMT">Sat, 02 Sep 2006 23:30:00 GMT</span></p>
  <div id="adsense">
  <script type="text/javascript"><!--
google_ad_client = "pub-1730274975094059";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
google_ad_channel ="";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "5189B5";
google_color_url = "000000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
  </div>
  <p>Today I decided to see how much of the test code in my current side project I could rip fixtures out of. At the same time I could see what kind of speed increase I got from staying away from the database. Model tests seem to be the most straight forward so I started there.</p><p>My assertion tests looked like this initially:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="ident">require</span> <span class="constant">File</span><span class="punct">.</span><span class="ident">dirname</span><span class="punct">(</span><span class="constant">__FILE__</span><span class="punct">)</span> <span class="punct">+</span> <span class="punct">'</span><span class="string">/../test_helper</span><span class="punct">'</span>

<span class="keyword">class </span><span class="class">AssertionTest</span> <span class="punct">&lt;</span> <span class="constant">Test</span><span class="punct">::</span><span class="constant">Unit</span><span class="punct">::</span><span class="constant">TestCase</span>
  <span class="ident">fixtures</span> <span class="symbol">:assertions</span>

  <span class="keyword">def </span><span class="method">test_validations</span>
    <span class="ident">assert_validates</span> <span class="symbol">:presence_of</span><span class="punct">,</span> <span class="constant">Assertion</span><span class="punct">,</span> <span class="symbol">:name</span><span class="punct">,</span> <span class="symbol">:description</span><span class="punct">,</span> <span class="symbol">:code</span>

    <span class="comment"># Uniqueness</span>
    <span class="ident">a</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">new</span><span class="punct">(</span><span class="symbol">:name</span> <span class="punct">=&gt;</span> <span class="ident">assertions</span><span class="punct">(</span><span class="symbol">:assert_difference</span><span class="punct">).</span><span class="ident">name</span><span class="punct">,</span>
                      <span class="symbol">:description</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">some descr</span><span class="punct">',</span> <span class="symbol">:code</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def assert_difference</span><span class="punct">')</span>
    <span class="ident">assert</span> <span class="punct">!</span><span class="ident">a</span><span class="punct">.</span><span class="ident">valid?</span>
    <span class="ident">assert_equal</span> <span class="punct">'</span><span class="string">has already been taken</span><span class="punct">',</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">errors</span><span class="punct">.</span><span class="ident">on</span><span class="punct">(</span><span class="symbol">:name</span><span class="punct">),</span> <span class="punct">&quot;</span><span class="string">does not validate uniqueness of name</span><span class="punct">&quot;</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">test_to_ruby</span>
    <span class="ident">a</span> <span class="punct">=</span> <span class="ident">assertions</span><span class="punct">(</span><span class="symbol">:assert_difference</span><span class="punct">)</span>
    <span class="ident">code</span> <span class="punct">=</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span>
    <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">code</span><span class="punct">,</span> <span class="ident">code</span>
    <span class="ident">assert_match</span> <span class="punct">&quot;</span><span class="string"># <span class="expr">#{a.name}</span></span><span class="punct">&quot;,</span> <span class="ident">code</span>
    <span class="ident">assert_match</span> <span class="punct">&quot;</span><span class="string"># <span class="expr">#{a.description}</span></span><span class="punct">&quot;,</span> <span class="ident">code</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">test_to_ruby_with_multiline_name_or_description</span>
    <span class="ident">name</span> <span class="punct">=</span> <span class="punct">&quot;</span><span class="string">multiline<span class="escape">\n</span>name<span class="escape">\n</span>and<span class="escape">\n</span>description</span><span class="punct">&quot;</span>
    <span class="ident">description</span> <span class="punct">=</span> <span class="punct">&quot;</span><span class="string">isn't<span class="escape">\n</span>this<span class="escape">\n\a</span>wesome</span><span class="punct">&quot;</span>

    <span class="ident">a</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">new</span><span class="punct">(</span><span class="symbol">:name</span> <span class="punct">=&gt;</span> <span class="ident">name</span><span class="punct">,</span> <span class="symbol">:description</span> <span class="punct">=&gt;</span> <span class="ident">description</span><span class="punct">)</span>

    <span class="ident">code</span> <span class="punct">=</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span>
    <span class="punct">[</span><span class="ident">name</span><span class="punct">.</span><span class="ident">split</span><span class="punct">(&quot;</span><span class="string"><span class="escape">\n</span></span><span class="punct">&quot;),</span> <span class="ident">description</span><span class="punct">.</span><span class="ident">split</span><span class="punct">(&quot;</span><span class="string"><span class="escape">\n</span></span><span class="punct">&quot;)].</span><span class="ident">flatten</span><span class="punct">.</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">line</span><span class="punct">|</span>
      <span class="ident">assert_match</span> <span class="punct">&quot;</span><span class="string"># <span class="expr">#{line}</span></span><span class="punct">&quot;,</span> <span class="ident">code</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">test_to_helper_file</span>
    <span class="ident">test_helper</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">to_helper</span>
    <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">).</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">a</span><span class="punct">|</span>
      <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span><span class="punct">,</span> <span class="ident">test_helper</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre></div>

<p>The first place I went to optimize was db calls in the tests that I just didn&#8217;t need. One that jumps out at me is the first line of the <code>test_to_ruby</code> method. We load a fixture from the database in order to test the <code>to_ruby</code> method on it. We don&#8217;t really need to hit the database because I can just as easily create an <code>Assertion</code> object in memory. Before we make the change let&#8217;s benchmark our tests:</p>

<div class="typocode"><pre><code class="typocode_default ">mini:~/code/projects/assertions kev$ ruby test/unit/assertion_test.rb 
Loaded suite test/unit/assertion_test
Started
....
Finished in 0.276884 seconds.

4 tests, 21 assertions, 0 failures, 0 errors</code></pre></div>

<p>0.276 seconds. Quite fast, but it could probably find some improvement. Let&#8217;s replace the fixture accessor call with a new <code>Assertion</code> object:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="keyword">def </span><span class="method">test_to_ruby</span>
  <span class="ident">a</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">new</span><span class="punct">(</span><span class="symbol">:name</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">assert_difference</span><span class="punct">',</span> <span class="symbol">:code</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def assert_difference; end</span><span class="punct">',</span>
                    <span class="symbol">:description</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">Does nothing</span><span class="punct">')</span>
  <span class="ident">code</span> <span class="punct">=</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span>
  <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">code</span><span class="punct">,</span> <span class="ident">code</span>
  <span class="ident">assert_match</span> <span class="punct">&quot;</span><span class="string"># <span class="expr">#{a.name}</span></span><span class="punct">&quot;,</span> <span class="ident">code</span>
  <span class="ident">assert_match</span> <span class="punct">&quot;</span><span class="string"># <span class="expr">#{a.description}</span></span><span class="punct">&quot;,</span> <span class="ident">code</span>
<span class="keyword">end</span></code></pre></div>

<p>Not much of a change. If we&#8217;re going to do this in multiple places we&#8217;ll probably extract to a helper. In the meantime let&#8217;s see how much that&#8217;s improved our runtime.</p>

<div class="typocode"><pre><code class="typocode_default ">mini:~/code/projects/assertions kev$ ruby test/unit/assertion_test.rb 
Loaded suite test/unit/assertion_test
Started
....
Finished in 0.085474 seconds.

4 tests, 21 assertions, 0 failures, 0 errors</code></pre></div>

<p>Wow, that&#8217;s about 3x faster. This isn&#8217;t any sort of uber-thorough scientifically measured increase, but we can certainly see that there is a benefit when it comes to speed. Let&#8217;s see if we can make other improvements.</p>

<p>The next spot we can probably improve is the <code>test_to_helper_file</code> method. Look, we make a <code>.find(:all)</code> call right there in the test itself. We also make that call to <code>Assertion.to_helper</code> which hits the database. Let&#8217;s look at the <code>to_helper</code> method for a moment.</p>

<div class="typocode"><pre><code class="typocode_ruby ">  <span class="keyword">def </span><span class="method">self.to_helper</span>
    <span class="punct">&lt;&lt;-</span><span class="constant">CODE</span><span class="string">
# Save this file to lib/ and remember to include TharBeAssertions in your test_helper.rb

module TharBeAssertions

<span class="expr">#{self.find(:all).collect(&amp;:to_ruby).join(&quot;\n&quot;)}</span>

end
</span><span class="constant">    CODE</span>
  <span class="keyword">end</span></code></pre></div>

<p>We can see here that when we make the <code>to_helper</code> call the method also calls <code>find(:all)</code>. Notice that we take the results of the <code>find</code> call and collect the returned value of the <code>to_ruby</code> method. This can be worked with.</p>

<p>First we require Mocha and Stubba:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="ident">require</span> <span class="constant">File</span><span class="punct">.</span><span class="ident">dirname</span><span class="punct">(</span><span class="constant">__FILE__</span><span class="punct">)</span> <span class="punct">+</span> <span class="punct">'</span><span class="string">/../test_helper</span><span class="punct">'</span>
<span class="ident">require</span> <span class="punct">'</span><span class="string">mocha</span><span class="punct">'</span>
<span class="ident">require</span> <span class="punct">'</span><span class="string">stubba</span><span class="punct">'</span>

<span class="keyword">class </span><span class="class">AssertionTest</span> <span class="punct">&lt;</span> <span class="constant">Test</span><span class="punct">::</span><span class="constant">Unit</span><span class="punct">::</span><span class="constant">TestCase</span></code></pre></div>

<p>Next we want to deal with that <code>find</code> call in <code>to_helper</code>. We need <code>find</code> to return objects that will respond to a <code>to_ruby</code> call and return something we can work with. For this we turn to stub objects.</p>

<p>Stubs are methods that return a canned value. They&#8217;re different than mocks in that they don&#8217;t verify anything, they simply give dummy information. We&#8217;ll use Stubba&#8217;s <code>stub</code> method to create our objects:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="keyword">def </span><span class="method">test_to_helper_file</span>
  <span class="ident">assertions</span> <span class="punct">=</span> <span class="punct">[</span><span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def some_assertion; end</span><span class="punct">'),</span> 
                <span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def another_assertion; end</span><span class="punct">')]</span>

  <span class="ident">test_helper</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">to_helper</span>
  <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">).</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">a</span><span class="punct">|</span>
    <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span><span class="punct">,</span> <span class="ident">test_helper</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre></div>

<p><code>stub</code> takes a hash with the form <code>:method_name =&gt; returned_value</code>. In our case we create objects that return &#8216;def some_assertion; end&#8217; and &#8216;def another_assertion; end&#8217; when <code>to_ruby</code> is called on them.</p>

<p>Next we need to make the <code>find</code> call in <code>to_helper</code> return what we&#8217;d like. We&#8217;ll do this with a mock (which will return our array of stubbed objects).</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="keyword">def </span><span class="method">test_to_helper_file</span>
  <span class="ident">assertions</span> <span class="punct">=</span> <span class="punct">[</span><span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def some_assertion; end</span><span class="punct">'),</span> 
                <span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def another_assertion; end</span><span class="punct">')]</span>
  <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">expects</span><span class="punct">(</span><span class="symbol">:find</span><span class="punct">).</span><span class="ident">with</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">).</span><span class="ident">returns</span><span class="punct">(</span><span class="ident">assertions</span><span class="punct">)</span>
  <span class="ident">test_helper</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">to_helper</span>
  <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">).</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">a</span><span class="punct">|</span>
    <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span><span class="punct">,</span> <span class="ident">test_helper</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre></div>

<p>Line 3 of the method is where we&#8217;ve injected our mock. If we read it in English it says that the <code>Assertion</code> class expects a call to <code>find</code> with the argument <code>:all</code> and then returns our assertions object (an array of stubs). At that point <code>collect</code> will be called on our array of stubs (in the <code>to_helper</code> method) and we&#8217;ll have our fake data in place.</p>

<p>If we run the code at this point we see a failure.</p>

<div class="typocode"><pre><code class="typocode_default ">mini:~/code/projects/assertions kev$ ruby test/unit/assertion_test.rb 
Loaded suite test/unit/assertion_test
Started
F...
Finished in 0.019647 seconds.

  1) Failure:
test_to_helper_file(AssertionTest) [test/unit/assertion_test.rb:42]:
:find(:all): expected calls: 1, actual calls: 2

4 tests, 22 assertions, 1 failures, 0 errors</code></pre></div>

<p>The mock we injected (using the <code>expects</code> call) is reporting that it actually recieved two calls to <code>find(:all)</code> instead of one. This is because we call <code>Assertion.find(:all)</code> in our test itself. We could modify our expectation but we wanted to eliminate as many of the database calls as we could anyway. Let&#8217;s see if we can remove that call.</p>

<p>If you think about it, we don&#8217;t need to find the assertions in the database and confirm that they showed up in the output of <code>to_helper</code> because that&#8217;s not where our test data comes from now. Now the test data is from our array of stubs, <code>assertions</code>. Let&#8217;s iterate through <code>assertions</code> instead and make sure the fake data showed up:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="keyword">def </span><span class="method">test_to_helper_file</span>
  <span class="ident">assertions</span> <span class="punct">=</span> <span class="punct">[</span><span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def some_assertion; end</span><span class="punct">'),</span> 
                <span class="ident">stub</span><span class="punct">(</span><span class="symbol">:to_ruby</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">def another_assertion; end</span><span class="punct">')]</span>
  <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">expects</span><span class="punct">(</span><span class="symbol">:find</span><span class="punct">).</span><span class="ident">with</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">).</span><span class="ident">returns</span><span class="punct">(</span><span class="ident">assertions</span><span class="punct">)</span>
  <span class="ident">test_helper</span> <span class="punct">=</span> <span class="constant">Assertion</span><span class="punct">.</span><span class="ident">to_helper</span>
  <span class="ident">assertions</span><span class="punct">.</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">a</span><span class="punct">|</span>
    <span class="ident">assert_match</span> <span class="ident">a</span><span class="punct">.</span><span class="ident">to_ruby</span><span class="punct">,</span> <span class="ident">test_helper</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre></div>

<p>When we run our tests we can see we&#8217;re back to passing and there&#8217;s been another speed improvement:</p>

<div class="typocode"><pre><code class="typocode_default ">mini:~/code/projects/assertions kev$ ruby test/unit/assertion_test.rb 
Loaded suite test/unit/assertion_test
Started
....
Finished in 0.018426 seconds.

4 tests, 22 assertions, 0 failures, 0 errors</code></pre></div>

<p>So, mocking and stubbing seems to be viable for atleast simple cases when working with models. I&#8217;m going to try using them with controller tests later and I&#8217;ll let you know how it goes.</p>
</div>
<p class="meta">
  Posted in <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>, <a href="/articles/category/testing" rel="tag">testing</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2006/09/02/mocking-models#comments">2 comments</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <ol class="comment-list" id="commentList">
  
    <li id="comment-1106"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1106'); }"  onmouseout="Element.hide('admin_comment_1106');" >
  <div id="admin_comment_1106" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1106', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1106&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1103/edit/1106" class="admintools">edit</a></div>
  <a name="comment-1106"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong>Thorsten</strong> </cite> said about 4 hours later:<br />
  <p>Very nice! Thanks for taking the time to write this up!
Now if only James would write some docs for the whole thing&#8230;</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1106";
//--></script>
<!-- mmc mmid:1106 mmdate:2006-09-02 23:49:14 mmauthor:Thorsten -->
</li>
<li id="comment-1108"   onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_comment_1108'); }"  onmouseout="Element.hide('admin_comment_1108');" >
  <div id="admin_comment_1108" style="display: none"><a class="admintools" href="#" onclick="if (confirm('Are you sure you want to delete this comment?')) { new Ajax.Request('/articles/nuke_comment/1108', {asynchronous:true, evalScripts:true, onComplete:function(request){new Effect.Puff(&quot;comment-1108&quot;,{duration:0.6});}}); }; return false;">nuke</a><a href="/admin/comments/article/1103/edit/1108" class="admintools">edit</a></div>
  <a name="comment-1108"></a>
  <img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" />
  <cite><strong><a href="http://blog.floehopper.org">James Mead</a></strong> </cite> said about 12 hours later:<br />
  <p>Kev: I&#8217;m glad you&#8217;re finding <a href="http://mocha.rubyforge.org">Mocha</a> useful.</p>


	<p>Thorsten: Have you see the <a href="http://blog.floehopper.org/articles/2006/09/01/mocha-quickstart">Mocha Quickstart</a> article I wrote recently? Does that help at all? If not, what documentation would help most &#8211; detailed api/rdoc or higher level tutorial?</p>
  <script type="text/javascript"><!--
if(!mmcomments){var mmcomments=[];}mmcomments[mmcomments.length]="1108";
//--></script>
<!-- mmc mmid:1108 mmdate:2006-09-03 07:41:47 mmauthor:James Mead -->
</li>

  
  </ol>


<p class="postmetadata alt">
  <small>
  <a href="http://glu.ttono.us/xml/rss20/article/1103/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>

  <p>Comments are disabled</p>

<script type="text/javascript"><!--
if(!mmposts){var mmposts=[];}mmposts[mmposts.length]="1103";
//--></script>
<!-- mmp mmid:1103 mmdate:2006-09-02 19:31:09 mmurl:/articles/2006/09/02/mocking-models mmtitle:Mocking Models -->
<script src="http://feeds.feedburner.com/~s/Gluttonous?i=http://glu.ttono.us/articles/2006/09/02/mocking-models" type="text/javascript" charset="utf-8"></script>

          <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
        </div>
        
        <div id="sidebar">
          
            <div id="search-results"></div>
            
              
      
<div class="sidebar-node">
  <h3>About</h3>
My name is Kevin Clark. I'm a <a href="http://ruby-lang.org">Ruby</a> hacker making awesome things at <a href="http://powerset.com">Powerset</a> in San Francisco.

</div>


      
<div class="sidebar-node">
  <h3>Understanding</h3>
<a href="http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols">Ruby Symbols</a><br />
<a href="http://glu.ttono.us/articles/2005/09/05/environments-in-rails-0-13-1">Environments in Rails 0.13.1</a><br />
<a href="http://glu.ttono.us/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a><br />
<a href="http://glu.ttono.us/articles/2005/10/30/why-and-how-ruby-and-rails-unit-testing">Ruby (and Rails) Unit Testing</a><br />
<a href="http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks">Rails Best Practices, Tips and Tricks</a><br />
<a href="http://glu.ttono.us/articles/2006/03/21/rails-for-designers">Rails for Designers</a><br />
<a href="http://glu.ttono.us/articles/2006/05/22/guide-environments-in-rails-1-1">Environments in Rails 1.1</a><br />
<a href="http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts">Test Driven RJS with ARTS</a>

</div>


      
<div class="sidebar-node">
  <h3>Cheat Sheets</h3>
<a href="http://glu.ttono.us/articles/2006/05/22/configuring-rails-environments-the-cheat-sheet">Configuring Rails Environments</a>

</div>


      
<div class="sidebar-node">
  <h3>Categories</h3>
<ul id="categories">
  
  <li><a href="/articles/category/web-dev">Web Dev</a> <em>(14)</em></li>
  
  
  <li><a href="/articles/category/coding">Coding</a> <em>(37)</em></li>
  
  
  <li><a href="/articles/category/rails">Rails</a> <em>(74)</em></li>
  
  
  <li><a href="/articles/category/op-ed">Op-Ed</a> <em>(7)</em></li>
  
  
  <li><a href="/articles/category/reviews">Reviews</a> <em>(3)</em></li>
  
  
  <li><a href="/articles/category/musings">Musings</a> <em>(18)</em></li>
  
  
  <li><a href="/articles/category/ruby">Ruby</a> <em>(69)</em></li>
  
  
  <li><a href="/articles/category/hacks">Hacks</a> <em>(22)</em></li>
  
  
  <li><a href="/articles/category/sdrug">sd.rb</a> <em>(10)</em></li>
  
  
  <li><a href="/articles/category/testing">testing</a> <em>(17)</em></li>
  
  
  <li><a href="/articles/category/documentation">documentation</a> <em>(6)</em></li>
  
  
  <li><a href="/articles/category/sightings">sightings</a> <em>(19)</em></li>
  
  
  <li><a href="/articles/category/guides">guides</a> <em>(8)</em></li>
  
  
  <li><a href="/articles/category/cheat-sheets">cheat sheets</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/business">business</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/summer-of-code">summer of code</a> <em>(5)</em></li>
  
</ul>


</div>


      
<div class="sidebar-node">
  <h3></h3>
<a href="http://feeds.feedburner.com/Gluttonous"><img src="http://feeds.feedburner.com/~fc/Gluttonous?bg=5189b5&amp;fg=333333&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>

</div>


      
<div class="sidebar-node">
  <h3></h3>
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->


</div>


  


            
            
            <a href="http://typo.leetsoft.com/" class="powered"><img alt="Powered" src="/images/powered.gif?1155250442" /></a>
            </div>

            <br clear="all" />
      </div>
      <div id="footer">
        <ul>
          <li><a href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0</a></li>
          <li><a href="http://jigsaw.w3.org/css-validator/validator?uri=http://glu.ttono.us/">Valid CSS</a></li>
        </ul>
      </div>
  </div>
<script type="text/javascript" src="http://tracker.measuremap.com/a/562"></script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-89073-1";
urchinTracker();
</script>
</body>
</html>


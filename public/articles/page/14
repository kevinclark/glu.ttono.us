<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Gluttonous</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta content="32.867098, -117.211597" name="ICBM" />
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://glu.ttono.us/xml/rsd" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/Gluttonous" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/Gluttonous" />
  <script src="/javascripts/cookies.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/prototype.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/effects.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/typo.js?1155250443" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="/stylesheets/theme/azure.css?1215021856" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/user-styles.css?1155250443" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/theme/print.css?1215021856" media="print" rel="Stylesheet" type="text/css" />
  <link href='http://www.myopenid.com/server' rel='openid.server' />
  <link href='http://kevinclark.myopenid.com/' rel='openid.delegate' />
</head>

<body>
  <div id="container" class="clearfix">
      <div id="header">
        <div id="logo">
          <h1 id="sitename"><a href="/">Gluttonous</a></h1>
          <h2 id="subtitle"></h2>
        </div>
      </div>
      
      <div id="search"> <form action="/articles/search" id="sform" method="get">
 <label for="q">Live Search:</label><input type="text" id="q" name="q" value="" size="15" />
<img alt="Spinner-blue" id="search_spinner" src="/images/spinner-blue.gif?1155250442" style="display:none;" />
</form>
<script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('search-results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_spinner')}, onLoading:function(request){Element.show('search_spinner')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script></div>
      

      <div id="content" class="clearfix">
        <div id="main">
           <div class="post">
  <h2><a href="/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Thu, 27 Oct 2005 09:42:00 GMT">Thu, 27 Oct 2005 09:42:00 GMT</span></p>
<p>Migrations are one of the more exciting features in <a href="http://www.rubyonrails.com">Rails</a> today. I think they&#8217;re wonderful and that they should be used. I&#8217;ll go over how any why you should use these gems.</p>

  <a href="/articles/2005/10/27/the-joy-of-migrations">Read more...</a>
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/27/the-joy-of-migrations#comments">17 comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/27/the-joy-of-migrations#trackbacks">3 trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/25/more-downtime-working-on-it">More Downtime, working on it</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Tue, 25 Oct 2005 23:14:13 GMT">Tue, 25 Oct 2005 23:14:13 GMT</span></p>
<p>Hi guys, sorry about the downtime. TextDrive decided to upgrade to rails 0.14.1 without mentioning it to their customers so my typo broke. Stability should be fixed as well.</p>

  
  <p class="meta">Posted in <a href="/articles/category/rails" rel="tag">Rails</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/25/more-downtime-working-on-it#comments">3 comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/25/more-downtime-working-on-it#trackbacks">no trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/20/patch-for-migrations-on-sqlite3">Patch for Migrations on SQLite3</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Thu, 20 Oct 2005 15:57:49 GMT">Thu, 20 Oct 2005 15:57:49 GMT</span></p>
<p>I&#8217;ve been able to confirm the <a href="http://glu.ttono.us/articles/2005/10/20/problems-with-sqlite3-and-migrations">ongoings of my last post</a> and it turns out that the bug only happens when you use symbols as arguments to the rename_column method, and then only when the column previously existed. Of course, I generally use symbols for migrations and I don&#8217;t think it would make much sense to rename a column you had just created.</p>

<p>Anyway, I was able to fix the bug and have submitted a <a href="http://dev.rubyonrails.com/ticket/2531">patch</a>.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/hacks" rel="tag">Hacks</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/20/patch-for-migrations-on-sqlite3#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/20/patch-for-migrations-on-sqlite3#trackbacks">3 trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/20/problems-with-sqlite3-and-migrations">Problems with SQLite3 and Migrations</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Thu, 20 Oct 2005 13:41:00 GMT">Thu, 20 Oct 2005 13:41:00 GMT</span></p>
<p>I love migrations. I really do. Its an elegant way to describe your database and be able to deploy on several types of systems. Unfortunately, I can&#8217;t seem to get these little gems to work quite right with SQLite3.</p>

<p>Adding and removing tables and columns seems to work, but renaming columns does not. Can anyone verify these results? I&#8217;m going to dig a little deeper and see if I can come up with a fix.</p>

<p>Update:
Note that I have tested this on 0.13.1 and 0.14.1.</p>

<p>Here&#8217;s the migration:</p>

<div class="typocode"><pre><code class="typocode_ruby "><span class="keyword">class </span><span class="class">RenameVisibilityToVisible</span> <span class="punct">&lt;</span> <span class="constant">ActiveRecord</span><span class="punct">::</span><span class="constant">Migration</span>
  <span class="keyword">def </span><span class="method">self.up</span>
    <span class="ident">rename_column</span> <span class="symbol">:categories</span><span class="punct">,</span> <span class="symbol">:visibility</span><span class="punct">,</span> <span class="symbol">:visible</span>
  <span class="keyword">end</span>

  <span class="keyword">def </span><span class="method">self.down</span>
    <span class="ident">rename_column</span> <span class="symbol">:categories</span><span class="punct">,</span> <span class="symbol">:visible</span><span class="punct">,</span> <span class="symbol">:visibility</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre></div>

<p>and the logs from the migration:</p>

<pre>
Migrating to RenameVisibilityToVisible (6)
  SQL (0.001381)   PRAGMA table_info(categories)
  SQL (0.001412)   PRAGMA table_info(categories)
  SQL (0.001140)   CREATE TEMPORARY TABLE altered_categories
(id INTEGER PRIMARY KEY NOT NULL, parent_id integer,
name varchar(255), visibility boolean DEFAULT 't', group_id integer) 
  SQL (0.000172)   PRAGMA index_list(categories)
  SQL (0.001005)   DROP TABLE categories
  SQL (0.001425)   PRAGMA table_info(altered_categories)
  SQL (0.001418)   PRAGMA table_info(altered_categories)
  SQL (0.000563)   CREATE TABLE categories 
(id INTEGER PRIMARY KEY NOT NULL, parent_id integer,
name varchar(255), visibility boolean DEFAULT 't', group_id integer) 
  SQL (0.000179)   PRAGMA index_list(altered_categories)
  SQL (0.000251)   DROP TABLE altered_categories
  SQL (0.004423)   UPDATE schema_info SET version = 6
Reached target version: 6
</pre>

  
  <p class="meta">Posted in <a href="/articles/category/rails" rel="tag">Rails</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/20/problems-with-sqlite3-and-migrations#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/20/problems-with-sqlite3-and-migrations#trackbacks">no trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/17/rubyconf-2005-wrap-up">RubyConf 2005 Wrap-up</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Tue, 18 Oct 2005 02:23:00 GMT">Tue, 18 Oct 2005 02:23:00 GMT</span></p>
<p>RubyConf 2005 was truly incredible. I got to meet some people who are truly great at what they do, and it was a pleasure.</p>

<h3>Highlights</h3>

<p>I&#8217;ve got to say my favorite presentations hands down were done by <a href="http://onestepback.org">Jim Weirich</a> on <a href="http://glu.ttono.us/articles/2005/10/15/dsls-in-ruby">domain specific languages in Ruby</a> and <a href="http://blog.zenspider.com/">Ryan Davis</a> on the incredible array of things they&#8217;re doing up in Seattle. Well done guys, it really made my conference.</p>

<p>The talks were incredible, but the people were why I came. I got to meet the caboose guys in person and hack it up as well as speak to some of the people who really make the ruby community what it is today.</p>

<h3>Links to Conference Stuff</h3>

<p><a href="http://yhrhosting.com:7000/">Ezra Zygmuntowicz</a> has been kind enough to post video of select presentations (including Jim Weirich&#8217;s) on his site. Ezra, if you&#8217;re reading this and need bandwidth or space, drop me an email at kevin [dot] clark [at] gmail [dot] com. I&#8217;m happy to help.</p>

<p><a href="http://blog.zenspider.com/">Ryan Davis</a> has been collecting slides from presenters, so watch his site for updates. I&#8217;m looking forward to his in particular.</p>

<p>Jeremy Hubert has <a href="(http://www.flickr.com/photos/jeremyhubert/sets/1160224/">photos</a>  up on flickr, and <a href="http://www.flickr.com/groups/58159176@N00/pool/">there&#8217;s a RubyConf 2005 Group</a> as well.</p>

<h3>Final Thoughts</h3>

<p>It was great. I&#8217;m really looking forward to next years conference, and RailsConf if it gets going. Next year I look forward to being able to join you all at the pub.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/17/rubyconf-2005-wrap-up#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/17/rubyconf-2005-wrap-up#trackbacks">no trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/16/damagecontrol-developers-youre-doing-a-heck-of-a-job">DamageControl: Developers, you're doing a heck of a job</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Sun, 16 Oct 2005 23:03:17 GMT">Sun, 16 Oct 2005 23:03:17 GMT</span></p>
<p>Aslak Hellesoy - ThoughtWorks</p>

<h3>About Me</h3>

<ul>
<li>I work for ThoughtWorks</li>
<li>I have a former Java life
<ul>
<li>&#8220;I also have a former life in the Java Community.&#8221;</li>
<li>PicoContainer</li>
<li>XDoclet</li>
</ul></li>
<li>Ruby OSS
<ul>
<li>RSCM</li>
<li>MetaProject</li>
<li>RSpec</li>
</ul></li>
</ul>

<h3>Agenda</h3>

<ul>
<li>Background</li>
<li>Continuous Integration
<ul>
<li>Show of hands for people who have used it: about 1/4 of audience</li>
</ul></li>
<li>Architecture</li>
<li>Plans for the future</li>
</ul>

<h3>Continuous Integration</h3>

<p>You can think of continuous integration as another member of your team.</p>

<ul>
<li>Will detect when there&#8217;s updated source code in your repository.</li>
<li>Will check out the changes, rebuild.</li>
<li>Will report to team whether or not the build was successful (including results of tests).</li>
</ul>

<h3>RSCM</h3>

<ul>
<li><p>OK</p>

<ul>
<li>Subversion</li>
<li>CVS</li>
<li>ClearCase</li>
</ul></li>
<li><p>KO</p>

<ul>
<li>Perforce</li>
<li>Monotone</li>
<li>StarTeam</li>
<li>Darcs</li>
</ul></li>
</ul>

<h3>Issue Tracking</h3>

<ul>
<li><p>OK</p>

<ul>
<li>RubyForge</li>
<li>JIRA</li>
<li>SourceForge</li>
<li>Trac</li>
</ul></li>
<li><p>KO</p>

<ul>
<li>Collaboa</li>
<li>Scarab</li>
<li>Bugzilla</li>
<li>FogBugz</li>
</ul></li>
</ul>

<h3>Distribution (No Gem)</h3>

<ul>
<li>Ruby
<ul>
<li>exe</li>
</ul></li>
<li>Rails
<ul>
<li>exe, zip/tgz, svn</li>
</ul></li>
<li>SQLite binaries
<ul>
<li>exe,zip/tgz,svn</li>
</ul></li>
<li>SQLite db
<ul>
<li>exe, zip/tgz</li>
</ul></li>
<li>DamageControl
<ul>
<li>exe,zip/tgz,svn</li>
</ul></li>
</ul>

<h3>Architecture</h3>

<ul>
<li>Users connect to SCM. </li>
<li>SCM passes to Builder which connects to DB and slave. </li>
<li>DB connects to Webapp.</li>
</ul>

<h3>Database Schema</h3>

<ul>
<li>projeccts, revisions, revsion<em>files, build</em>executions, builds, artifacts</li>
</ul>

<h3>Short Term Future</h3>

<ul>
<li>Move from Codehaus to TextDrive</li>
<li>Use Collaboa</li>
<li>Visual identity (website and UI)</li>
<li>Fix the worst bugs</li>
</ul>

<h3>Longer term future</h3>

<ul>
<li>More SCMs(RSCM)</li>
<li>Distributed builds</li>
<li>More SCMs</li>
</ul>

<h3>Source</h3>

<ul>
<li>http://hieraki.lavalamp.ca/</li>
<li>http://jira.codehaus.org/browse/DC
&#8230;</li>
</ul>

<h3>Gotchas</h3>

<ul>
<li>SQLite - Database Busy</li>
<li>Missing dll on windows</li>
</ul>

<p>Q: Say you have CruiseControl running, whats the switching time?</p>

<p>A: Hopefully very little.</p>

<p>Q: Do you support multiple build configurations? Like building against different versions of ruby. Do you support multiple branches?</p>

<p>A: No, we don&#8217;t support multiple build configs. You can work around with multiple projects. We don&#8217;t support multiple branches in cvs but do in svn.</p>

  
  <p class="meta">Posted in <a href="/articles/category/web-dev" rel="tag">Web Dev</a>, <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/damagecontrol-developers-youre-doing-a-heck-of-a-job#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/damagecontrol-developers-youre-doing-a-heck-of-a-job#trackbacks">3 trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/16/rails-serving-the-long-tail-in-1883-and-2005">Rails: Serving the long tail in 1883 and 2005</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Sun, 16 Oct 2005 21:56:25 GMT">Sun, 16 Oct 2005 21:56:25 GMT</span></p>
<p>Nathaniel Talbott</p>

<h3>Wagging the Dog</h3>

<p>&#8220;Our old release process was like a bowl of gravy with chunks floating in it.&#8221;</p>

<p>&#8220;The new one is more like a box of candy, where everything is wrapped up and packaged and you sort of take the whole box.&#8221;  (?)</p>

<p>The long tail by Chris Anderson: Sales volume vs. Variety. Most of the money is made in the hits, the long tail is the large set of non hits. The long tail of non-hits can, cumulatively, make more of a difference than the small number of hits.
One of the big marketplace changers has been Amazon recommendations.</p>

<h3>Wide, Inaccessible Places</h3>

<p>In the 1800s, the east and west were seperated by terrain. After booms out west, the government funded the transcontinental railroad. It did more than allow easier trade, it enabled people to move to the middle of the country, to the long tail of the midwest.</p>

<h3>The (mis)Fortune 5,000,000</h3>

<p>People are poorly served by the features in technology.</p>

<ul>
<li>How many of us know 5% of the features in word, or our finance programs?</li>
<li>The software causes problems for people.</li>
</ul>

<p>Video of guy beating the crap out of his computer.</p>

<p>Anecdote about excell being bad for food-coop finance tool.</p>

<h3>What happens when t approaches 0?</h3>

<p>What happens when it gets cheaper to make an application?</p>

<ul>
<li>With ruby I thought about making software to solve problems</li>
<li><p>With rails, I have no excuse not to</p></li>
<li><p>Developers are using more time making little, specifically targeted applications</p></li>
<li><p>Developers are spending more time solving problems for users and less time fighting with their chosen technology</p></li>
</ul>

<p>From IRC:</p>

<pre>
<code>
<KirinDave> Maybe programming will become like martial arts in chinese novels.
<technomancy> DHH is like Wong Fei Ho.
</code>
</pre>

<h3>From Disenfranchised to Passionate with Pocket Change</h3>

<ul>
<li>The coop users (from anecdote) are being disenfranchised but rails has the potential to make it better for everyone.</li>
<li>Tickets to the interior is suddenly cheap enough for everyone.</li>
</ul>

<h3>Gold Rushers and Homesteaders</h3>

<ul>
<li>Gold rushers interested in making it big quickily
<ul>
<li>How do you know them? They may use alot of <code>!</code>. The .coms</li>
<li>They&#8217;ll be gone or a hit themselves in a year</li>
</ul></li>
<li>Homesteaders
<ul>
<li>These people aren&#8217;t interested in going public, they want to create something big but not necessarily get big. They want to feed their passion. They serve the long tail.</li>
</ul></li>
</ul>

<h3>Ruby is to Raw Energy as Rails is to the Transcontinental</h3>

<ul>
<li>If you&#8217;re here, you know Ruby empowers Rails.</li>
<li>You can&#8217;t think that simple in Java, but duplicating may be possible.</li>
<li>Whatabout the nonweb? The desktop? The handheld?</li>
<li>Don&#8217;t get boxed in: with ruby at your fingers, you can go far beyond the web.</li>
</ul>

<p>Build software, there&#8217;s little to lose and everything to be gained.</p>

<p>Q/A</p>

<p>Q: Can you talk a little more about users owning their data? How do we maintain applications when we have hundreds of them?</p>

<p>A: What I mean by users owning their data is that users want to be able to controll and export it. If you build 120 web apps then there&#8217;s management that will be needed, but you would host and maintain users. The data is theirs, not yours. Users care about being able to take their data and do whatever they want to it (use it in another app).</p>

<p>Q: How many people consider themselves making a living on the long tail?</p>

<p>Several hands go up.</p>

<p>Q: You were talking about desktop applications like Word and Excel. 4 Months ago I paid for work documents and it turns out they were already in Word. There&#8217;s two types of complexity: one app with many features and small tail applications dealing with a dozen or more smaller applications. Some time, we&#8217;ll need to make bigger applications out of the smaller. There&#8217;s some complexity we can&#8217;t get rid of. We&#8217;re getting more productive though we feel things are more complex. There are limits to compression.</p>

<p>A: There is more than one type of long tail app. There&#8217;s a space for aggregators, filters, the things that will allow us to access these longtail things. I&#8217;m not saying hits are bad. I&#8217;m glad google is a hit because it makes my experience better. I&#8217;m just saying there are huge opportunities for the long tail and we don&#8217;t need that many hits. Build something small.</p>

<p>Derek Sivers from CD Baby. You can make a business in the long tail. We only work with indy musicians. If you put a whole bunch of bands that only sell 5 or 10 cds in place, then its very worth it. I think its interesting that by serving the people who aren&#8217;t getting served, by putting them all in place, you make a business.</p>

<p>A: Its ok to make money, but the goal should be by actually serving needs.</p>

<p>Curt Hibbs: Another aspect of the long tail is that there&#8217;s an auxilary problem. When there&#8217;s thousands of things out there, how do you find them? Somebody needs to become an aggregator for long tail solutions out there.</p>

<p>A: There is a need for aggregators to fill that niche.</p>

<p>Q: I&#8217;m constantly amazed by the small shops that say, &#8220;I need an app to do this&#8221;, and its nice to be able to say, &#8220;you can have that for a few hundred dollars&#8221;. By picking up the small companies you can make a business.</p>

<p>A: Yes, and when you&#8217;re talking to the print shop (small company), find out who they know and go talk to who they know (connector) and get that person to talk about your software.</p>

<p>Q: Do you have any ideas on what a framework on Rails would look like on a desktop?</p>

<p>A: I have some ideas, but it&#8217;d be nice if someone else could do it. It really needs to be extracted.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/rails-serving-the-long-tail-in-1883-and-2005#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/rails-serving-the-long-tail-in-1883-and-2005#trackbacks">14 trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/16/the-state-of-ruby-on-rails">The State of Ruby on Rails</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Sun, 16 Oct 2005 21:01:00 GMT">Sun, 16 Oct 2005 21:01:00 GMT</span></p>
<p>David Heinemeier Hansson</p>

<h3>What an amazing year</h3>

<p>Rails last year was a part of the ruby circle. Over the past year, we&#8217;ve seen an explosive growth in Ruby and Rails. ( A significant number of the crowd are being paid to do Rails. )</p>

<p>Showed a quote from a J2EE programmer who was unhappy doing J2EE and would rather be doing rails. &#8220;I face quite the quandary, J2EE pays quite well&#8221;.</p>

<p>People who would otherwise not be interested in Ruby are taking notice because of what is happening now. People who have something to lose are still considering working with Ruby.</p>

<p>Even after building a career, mostly around Java Development, people are looking for an alternative; Ruby and RoR is consistently providing that alternative.</p>

<h3>It didn&#8217;t start out like that</h3>

<p>We went through four phases:</p>

<ul>
<li>First they <em>ignore</em> you
<ul>
<li>Why do we need this new language? Isn&#8217;t there PERL and Python?</li>
<li>The first barrier is to get awareness out</li>
</ul></li>
<li>Then they <em>laugh</em> at you
<ul>
<li>Once awareness is out, people make fun: &#8220;Its a toy language, and a framework on top of it.&#8221;</li>
<li>People care enough to make jokes out of you</li>
</ul></li>
<li>Then they <em>fight</em> you
<ul>
<li>This was a repercussion from pushing out the barriers in step one.</li>
<li>Java developers struck back to discredit Ruby and Rails</li>
</ul></li>
</ul>

<p>Showed a quote from a Java developer, &#8220;About tadalist, that application is so stupid that I&#8217;m wondering how the hell it could have taken him 600 lines to write it.&#8221; &#8211; Geert Bevin</p>

<p>Geert Bevin writes, &#8220;Move over Ruby on Rails, Java can be concise too!&#8221;</p>

<p>Enter screen shots comparing lines of code.</p>

<h3>Last step: Then you WIN</h3>

<ul>
<li>Since rails was released, 150,000 downloads from rubyforge. Gems celebrated 1 million downloads, half a million were rails.</li>
<li>Slashdottings all over the place, a credit each time someone tries to build a &#8220;Rails Killer&#8221;</li>
<li>At least 9 ruby on rails slashdottings</li>
<li>9,738 posts found via technorati</li>
</ul>

<p>Key component of adoption: word of mouth from people like Martin Fowler.</p>

<h3>The Next Big Step: The book</h3>

<ul>
<li>As ruby was written in 2001 with PickAxe, Agile Web Development is Rails&#8217;s PickAxe</li>
<li>Yesterday it was #2 on Amazon&#8217;s computer book list, sold over 20,000 copies</li>
<li>In last 7 days 2,475 copies of the book shipped from distributor</li>
</ul>

<p>These are indicators its taking off and people care</p>

<p>Huge list of people from many different countries being paid to work in Rails on the Rails Wiki. 400+ professionals from 55 countries.</p>

<h3>Poster Children</h3>

<ul>
<li>37 Signals</li>
<li>43 Things/places/people doing over 1 million page views a day</li>
<li>Odeo</li>
<li>Strongspace from TextDrive</li>
</ul>

<h3>Envy</h3>

<ul>
<li>Been cloned in many languages
<ul>
<li>Sails/trails in java</li>
<li>Monorail for .NET</li>
<li>Biscuit: PHP on Rails</li>
<li>Grails for Groovy</li>
<li>Cake PHP</li>
<li>Catalyst for PERL</li>
<li>Subway and Turbo Gears for Python</li>
</ul></li>
</ul>

<h3>But why?</h3>

<p>*I think one of the explanations is absolute competition is not an absolute good.
  *A large number of web frameworks isn&#8217;t necesarily good. 
  *We don&#8217;t have 10 implementations of each library in ruby, or CPAN.</p>

<ul>
<li>Ruby on Rails tried to include &#8220;just enough to make it worth it, not enough to discourage&#8221;
<ul>
<li>Its the same processes, but done in a language which &#8220;doesn&#8217;t hurt&#8221;</li>
</ul></li>
<li>We tell people stories that people were ready to hear
<ul>
<li>J2EE was too complex, and there&#8217;s room for something else</li>
</ul></li>
</ul>

<h3>Now what?</h3>

<ul>
<li>The most important big next step: 1.0</li>
<li>Hoping to press out the release candidate for 1.0 later this afternoon.</li>
<li>Next: The &#8216;platform&#8217;</li>
</ul>

<h3>Tools in the chain</h3>

<ul>
<li>Want to make more apps supporting Rails
<ul>
<li>SwitchTower - Deployment application</li>
<li>Shipping alongside 1.0</li>
<li>About moving Rails up (to multi-machine deployments)</li>
<li>Gauge - Monitoring a clustered Rails application</li>
<li>The next app: real time distributed monitoring</li>
<li>Conductor - Should make development &#8220;nicer&#8221;</li>
<li>About moving Rails down</li>
<li>CocoaMySql-like interface for Rails, so you don&#8217;t have to create tables by hand</li>
<li>Scaffolding - making it more suitable for permanent use</li>
<li>Naked Objects: A gui with which you can control the domain model</li>
</ul></li>
</ul>

<h3>Creating an industry</h3>

<p>Vendors who provide services for Rails developers.</p>

<ul>
<li>TextDrive</li>
<li>Making it simpler for getting more than a simple Rails app going</li>
</ul>

<h3>Getting organized</h3>

<ul>
<li>Until earlier this year, David had the only commit keys to the repository
<ul>
<li>This was needed for some time</li>
</ul></li>
<li>Now 12 on the core team with commit</li>
</ul>

<h3>Web team, sysadmin</h3>

<ul>
<li>A nice face helps</li>
<li>We need to work on it</li>
</ul>

<h3>RailsConf?</h3>

<p>&#8220;A swell idea&#8221;</p>

<p>Questions?
Q: You&#8217;re a good marketer, where do you get it?</p>

<p>A: Just doing it. Don&#8217;t be afraid to step over the boundary. Investigate where the line in the sand is. Be passionate about something. Be interested in getting others to join your passion. &#8220;The Innovator&#8217;s Solution&#8221; and the &#8220;Innovator&#8217;s Dilemma&#8221; are both great. Kathy Sierra from Creating Passionate Users (blog) is also excellent and will have a book up.</p>

<p>Q: Why bother In 10 words or less?</p>

<p>A: I was on the plane to the US a year and a half ago. I was sitting next to a young mormon and coming back from his 2 years in Norway. What he said to me really resonated. I asked, &#8220;Why would you want to do this?&#8221;. He said, &#8220;Well, I think it would be selfish if I knew the truth or a better way and I wasn&#8217;t sharing it&#8221;. Thats some of it, also, &#8220;Its fun&#8221;.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/the-state-of-ruby-on-rails#comments">3 comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/the-state-of-ruby-on-rails#trackbacks">no trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/16/t-6-minutes-to-state-of-rails">T=-6 minutes to State of Rails</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Sun, 16 Oct 2005 19:57:57 GMT">Sun, 16 Oct 2005 19:57:57 GMT</span></p>
<p>I&#8217;m sitting here waiting for DHH to take the podium. I&#8217;ll have notes for you as soon as its completed.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/rails" rel="tag">Rails</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/t-6-minutes-to-state-of-rails#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/t-6-minutes-to-state-of-rails#trackbacks">15 trackbacks</a></p>
  </div>
 <div class="post">
  <h2><a href="/articles/2005/10/16/matzs-keynotes">Matz's keynotes</a></h2>
<p class="auth">Posted by kev
<span class="typo_date" title="Sun, 16 Oct 2005 09:12:00 GMT">Sun, 16 Oct 2005 09:12:00 GMT</span></p>
<h2>Keynote Address - <span style="text-decoration: line-through">Why Arrows are Bad</span> Visions for the future</h2>

<h2>Yukihiro &#8220;Matz&#8221; Matsumoto</h2>

<p>Thank you, people, for attending here. I&#8217;d like to talk about the vision for the future. Two years ago, I gave the same kind of title(?).</p>

<h3>Programming Languages are Now Commodities</h3>

<p>Like Cars; They are All Good Enough</p>

<ul>
<li>Basically Same Structure</li>
<li>Difference in Design</li>
<li>and Small Functionality</li>
</ul>

<p>We choose our own brand of language, based on the small differences that we like, personally.</p>

<h3>Japanese are Good at Making Commodities</h3>

<ul>
<li>Toyota</li>
<li>Honda</li>
<li>Sony</li>
<li>Panasonic</li>
<li>&#8230; and Ruby</li>
</ul>

<h3>Developing Commodities</h3>

<ul>
<li>Need to be Cheap</li>
<li>Design Matter</li>
<li>Small Things Matter</li>
<li>Need to Keep Moving</li>
<li>&#8230;with wild and crazy ideas</li>
</ul>

<p>The key to developing commodities - they need to be cheap. Ruby is cheap, because it&#8217;s free.</p>

<p>Toyota develops a new car every six months or so.</p>

<h3>Since Ruby is Good Enough</h3>

<ul>
<li>Its OK to try Crazy Ideas</li>
<li>If they don&#8217;t work out, just try another</li>
<li>Just not to stop moving
<ul>
<li>activate community</li>
<li>to have FUN!</li>
</ul></li>
</ul>

<p>The real theme of tonight&#8217;s address is&#8230;</p>

<h2>Wild and Weird Ideas</h2>

<h3>The New Path</h3>

<ul>
<li>Yet Another Ruby VM (YARV)</li>
<li>1.9 New Feature Testbed</li>
</ul>

<h3>YARV</h3>

<ul>
<li>Faster</li>
<li>Simpler</li>
<li>Native Thread Aware</li>
</ul>

<p>Ask ko1 There</p>

<p>I&#8217;ll focus on the crazy ideas.</p>

<h3>1.9 Possible New Features</h3>

<ul>
<li>keyword arguments</li>
<li>constants</li>
<li>multiple assignment</li>
<li>eval</li>
<li>lambda</li>
<li>annotations</li>
<li>traits</li>
<li>namespace</li>
<li>method combination</li>
<li>multilingualization</li>
</ul>

<h3>Keyword Arguments</h3>

<ul>
<li>Make method calls more descriptive</li>
<li>Order Free Arguments
<ul>
<li>Help you save Brain Power</li>
</ul></li>
</ul>

<h3>Keyword Arguments</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">def </span><span class="method">foo</span><span class="punct">(</span><span class="ident">a</span><span class="punct">,</span><span class="ident">b</span><span class="punct">=</span><span class="number">0</span><span class="punct">,</span><span class="ident">c</span><span class="punct">:</span><span class="number">4</span><span class="punct">)</span>
   <span class="punct">...</span>
 <span class="keyword">end</span>

 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># a=1,b=0,c=4</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># a=1,b=2,c=4</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">,</span><span class="ident">c</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># a=1,b=0,c=2</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">,</span><span class="ident">c</span><span class="punct">:</span><span class="number">3</span><span class="punct">)</span> <span class="comment"># a=1,b=2,c=3</span></code></pre></div>

<h3>Keyword Arguments (2)</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">def </span><span class="method">bar</span><span class="punct">(</span><span class="ident">a</span><span class="punct">:,</span><span class="ident">b</span><span class="punct">:</span><span class="number">0</span><span class="punct">)</span>
   <span class="punct">...</span>
 <span class="keyword">end</span>

 <span class="keyword">alias</span> <span class="symbol">:foo</span> <span class="symbol">:bar</span>

 <span class="ident">foo</span><span class="punct">()</span> <span class="comment"># error! is a mandatory</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># error! no positional argument</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">a</span><span class="punct">:</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># a=1, b=0</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">a</span><span class="punct">:</span><span class="number">1</span><span class="punct">,</span><span class="ident">b</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># a=1,b=2</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">b</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># error! a is mandatory</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">c</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># error! c is not defined</span></code></pre></div>

<p>All positional arguments go before any named arguments.</p>

<p>Can have optional default values for positional arguments.</p>

<p>Cannot have two adjacent commas to represent omitted arguments.</p>

<p>One goal of this is to replace fragile optional arguments.</p>

<p>Can specify &#8220;c: :foo&#8221; to represent a default value of symbol :foo.</p>

<p>Spaces are not allowed before the first &#8216;:&#8217; (i.e., &#8220;c : 1&#8221; is not allowed).</p>

<h3>Keyword Arguments (3)</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">def </span><span class="method">bar</span><span class="punct">(*</span><span class="ident">rest</span><span class="punct">,</span> <span class="ident">a</span><span class="punct">:</span><span class="number">4</span><span class="punct">,</span> <span class="ident">b</span><span class="punct">:</span><span class="number">0</span><span class="punct">,</span>   <span class="punct">*</span><span class="ident">keys</span><span class="punct">)</span>
  <span class="punct">...</span>
 <span class="keyword">end</span>

 <span class="keyword">alias</span> <span class="symbol">:foo</span> <span class="symbol">:bar</span>

 <span class="ident">foo</span><span class="punct">()</span> <span class="comment"># rest=[],a=4,b=0,keys={}</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># rest=[1],a=4,b=0,keys={}</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">a</span><span class="punct">:</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># rest=[{a:1}], a=1,b=0,keys={a:1}</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">a</span><span class="punct">:</span><span class="number">1</span><span class="punct">,</span><span class="ident">b</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span>  <span class="comment"># rest = [{a:1,b:2}],a=1,b=2,keys={a:1,b:2}</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">,</span><span class="ident">b</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># rest=[1,2,{b:2}],a=4,b=2,keys={b:2}</span>
 <span class="ident">foo</span><span class="punct">(</span><span class="ident">c</span><span class="punct">:</span><span class="number">2</span><span class="punct">)</span> <span class="comment"># rest=[{c:2}],a=4,b=0,keys={c:2}</span></code></pre></div>

<p>Both *rest and   *keys are optional.  Note that *rest and   *keys name new local variables, so are completely arbitrary.  </p>

<h3>Keyword Arguments Summary</h3>

<ul>
<li>Keyword arguments are passed as a Hash at the end of arguments</li>
<li>Rest argument (*) contains a keyword hash as well</li>
<li>Keyword argument (  *) contains a Hash (without default values)</li>
<li>Unspecified keys are allowed if keyword argument is present</li>
</ul>

<p>The   *keys hash contributes 1 to arity().</p>

<p>Chad steps in and stops the madness that ensued.</p>

<h3>Constants</h3>

<p>In short, constants will become more like class variables</p>

<ul>
<li>with better appearance</li>
<li>with restriction in assignments</li>
<li>with warning for direct modification</li>
</ul>

<h3>Multiple Values</h3>

<ul>
<li>Too complex to understand</li>
<li>Virtually No One on Earth Understands</li>
<li>Much simpler rules</li>
</ul>

<h3>&#8220;Real&#8221; Multiple Values</h3>

<p>a la Common Lisp</p>

<ul>
<li>Methods can return multiple values</li>
<li>Multiple values in ordinary context give the first value</li>
<li>Array to Values (RHS *)</li>
<li>Values to Array (LHS *)</li>
</ul>

<h3>Multiple Values Example</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">def </span><span class="method">multi</span><span class="punct">()</span>
   <span class="keyword">return</span> <span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">,</span><span class="number">3</span>
 <span class="keyword">end</span>

 <span class="ident">a</span> <span class="punct">=</span> <span class="ident">multi</span><span class="punct">()</span> <span class="comment"># a=1</span>
 <span class="ident">a</span><span class="punct">,</span><span class="ident">b</span> <span class="punct">=</span> <span class="ident">multi</span><span class="punct">()</span> <span class="comment"># a=1,b=2    **</span>
 <span class="punct">*</span><span class="ident">c</span> <span class="punct">=</span> <span class="ident">multi</span><span class="punct">()</span> <span class="comment"># c=[1,2,3]</span>

 <span class="ident">a</span><span class="punct">,</span><span class="ident">b</span> <span class="punct">=</span> <span class="number">1</span><span class="punct">,</span><span class="number">2</span> <span class="comment"># a=1,b=2</span>
 <span class="ident">a</span><span class="punct">,</span><span class="ident">b</span> <span class="punct">=</span> <span class="punct">[</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">]</span> <span class="comment"># a=[1,2],b=nil    **</span>
 <span class="ident">a</span><span class="punct">,</span><span class="ident">b</span> <span class="punct">=</span> <span class="punct">*[</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">]</span> <span class="comment"># a=1,b=2</span></code></pre></div>

<p>** Are the different behaviors.</p>

<h3>Multiple Values Example (2)</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">def </span><span class="method">multi</span><span class="punct">()</span>
   <span class="keyword">return</span> <span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">,</span><span class="number">3</span>
 <span class="keyword">end</span>
 <span class="keyword">def </span><span class="method">output</span><span class="punct">(*</span><span class="ident">args</span><span class="punct">)</span>
   <span class="ident">p</span> <span class="ident">args</span>
 <span class="keyword">end</span>

 <span class="ident">output</span><span class="punct">(</span><span class="ident">multi</span><span class="punct">())</span> <span class="comment"># =&gt; [1]</span>
 <span class="ident">output</span><span class="punct">([</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">])</span> <span class="comment"># =&gt; [[1,2]]</span>
 <span class="ident">output</span><span class="punct">(*[</span><span class="number">1</span><span class="punct">,</span><span class="number">2</span><span class="punct">])</span> <span class="comment"># =&gt; [1,2]</span>
 <span class="ident">output</span><span class="punct">(*</span><span class="number">1</span><span class="punct">)</span> <span class="comment"># error! 1 is not an array</span>
 <span class="ident">output</span><span class="punct">(*</span><span class="ident">multi</span><span class="punct">())</span> <span class="comment"># =&gt; ??</span></code></pre></div> 

<h3>Eval</h3>

<ul>
<li>Prohibits Optimization</li>
<li>Turn it to Keyword</li>
<li>I&#8217;m not sure if this is a good idea</li>
</ul>

<h3>Lambda</h3>

<ul>
<li>An anonymous function</li>
<li>Currently arguments are emulated by block parameters</li>
<li>But they are different
<ul>
<li>number check</li>
<li>optional arguments</li>
<li>keyword arguments</li>
</ul></li>
</ul>

<p>[number check == arity check?]</p>

<h3>Lambda Syntax</h3>

<p>? args {&#8230;}</p>

<p>Fill ? as you like most.</p>

<ul>
<li>lambda(n=5) {&#8230;}</li>
<li>->(n=5) {&#8230;}</li>
<li>^(n=5) {&#8230;}</li>
<li>(n=5) {&#8230;}</li>
<li>:(n=5){&#8230;}</li>
<li>.(n=5){&#8230;}</li>
<li>(n=5)->{&#8230;}</li>
</ul>

<p>Dave Thomas suggests def(n=5) {&#8230;}
Matz suggests y = def(x=5) end
Dave suggests lambda(n=5) end be a closure, and def(n=5) end be not.</p>

<h3>Annotations</h3>

<p>To declare additional attributes of methods, class, etc.</p>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="comment"># @require: arg1 &gt;= 10</span>
 <span class="comment"># @overriding: true</span>
 <span class="comment"># @visibility: public</span>

 <span class="keyword">def </span><span class="method">foo</span><span class="punct">(</span><span class="ident">arg1</span><span class="punct">)</span>
   <span class="punct">...</span>
 <span class="keyword">end</span></code></pre></div>

<h3>Traits</h3>

<ul>
<li>Mix-in can be Complex Sometimes</li>
<li>Traits - Mucnh Simpler Solution</li>
<li>Make Modules More Like Traits</li>
</ul>

<h3>Traits (2)</h3>

<p>Traits are a set of methods</p>

<ul>
<li>can be included to classes</li>
<li>can be merged with another trait (+ operator)</li>
<li>can exclude methods (- operator)</li>
<li>can rename some methods (rename operation)</li>
</ul>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="constant">T3</span> <span class="punct">=</span> <span class="constant">T1</span> <span class="punct">+</span> <span class="punct">(</span><span class="constant">T2</span> <span class="punct">-</span> <span class="punct">[</span><span class="symbol">:foo</span><span class="punct">,</span> <span class="symbol">:bar</span><span class="punct">])</span>
 <span class="keyword">class </span><span class="class">Foo</span>
   <span class="ident">include</span> <span class="constant">T3</span>
 <span class="keyword">end</span></code></pre></div>

<p>T3 would have all method in t1 except for foo and bar, and would put all of these in the class Foo</p>

<h3>Traits like Modules</h3>

<ul>
<li>Merging (+ operator)</li>
<li>Excluding (via undef)</li>
<li>Renaming (via alias)</li>
<li>Duplicate Inclusion</li>
</ul>

<p>Much Like Traits but Symbolic</p>

<h3>Symbolic Inclusion</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">module </span><span class="module">Traits</span>
  <span class="keyword">def </span><span class="method">foo</span>
  <span class="keyword">end</span>
 <span class="keyword">end</span>

 <span class="keyword">class </span><span class="class">Foo</span>
   <span class="ident">include</span> <span class="constant">Traits</span>
 <span class="keyword">end</span>

 <span class="keyword">module </span><span class="module">Traits</span>
   <span class="keyword">def </span><span class="method">bar</span>
   <span class="keyword">end</span>
 <span class="keyword">end</span>

 <span class="ident">f</span> <span class="punct">=</span> <span class="constant">Foo</span><span class="punct">.</span><span class="ident">new</span>
 <span class="ident">f</span><span class="punct">.</span><span class="ident">bar</span> <span class="comment"># should be avaliable</span></code></pre></div>

<h3>Namespace</h3>

<ul>
<li>Open class is Too Dangerous
<ul>
<li>Global Modification</li>
</ul></li>
<li><p>Restrict Namespace in a Particular File</p></li>
<li><p>Selector Namespace</p>

<ul>
<li>or something different</li>
</ul></li>
</ul>

<h3>Namespace Example</h3>

<p>[involves Japanese characters&#8230; the &#8216;require&#8217; is local to the file?]</p>

<h3>Method Combination</h3>

<p>a la Common Lisp</p>

<ul>
<li>Similar to Aspect Oriented Programming</li>
<li>Allow before/after/around hook for each method</li>
<li>No concrete syntax is set</li>
</ul>

<h3>Method Combination Example</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">class </span><span class="class">Foo</span>
   <span class="keyword">def </span><span class="method">foo</span>
     <span class="ident">p</span> <span class="symbol">:foo</span>
   <span class="keyword">end</span>
 <span class="keyword">end</span>

 <span class="keyword">class </span><span class="class">Bar</span><span class="punct">&lt;</span><span class="constant">Foo</span>
   <span class="keyword">def </span><span class="method">foo:before</span>
     <span class="ident">p</span> <span class="punct">[</span><span class="symbol">:foo</span><span class="punct">,</span> <span class="symbol">:before</span><span class="punct">]</span>
   <span class="keyword">end</span>
   <span class="keyword">def </span><span class="method">foo:after</span>
     <span class="ident">p</span> <span class="punct">[</span><span class="symbol">:foo</span><span class="punct">,</span> <span class="symbol">:before</span><span class="punct">]</span>
   <span class="keyword">end</span>
 <span class="keyword">end</span>

 <span class="ident">bar</span> <span class="punct">=</span> <span class="constant">Bar</span><span class="punct">.</span><span class="ident">new</span>
 <span class="ident">bar</span><span class="punct">.</span><span class="ident">foo</span> <span class="comment"># [:foo, :before], :foo, [:foo, :after]</span></code></pre></div>

<p>(Nestable and stackable)</p>

<h3>Method Combination Example (2)</h3>

<div class="typocode"><pre><code class="typocode_ruby "> <span class="keyword">module </span><span class="module">SomeModule</span>
   <span class="keyword">def </span><span class="method">initialize:before</span><span class="punct">(*</span><span class="ident">args</span><span class="punct">)</span>
     <span class="comment"># initialize attributes related to SomeModule</span>
   <span class="keyword">end</span>

   <span class="punct">...</span>
 <span class="keyword">end</span>

 <span class="keyword">class </span><span class="class">SomeClass</span>
   <span class="ident">include</span> <span class="constant">SomeModule</span>
   <span class="punct">...</span>
 <span class="keyword">end</span>

 <span class="ident">obj</span> <span class="punct">=</span> <span class="constant">SomeClass</span><span class="punct">.</span><span class="ident">new</span></code></pre></div>

<h3>Multilingualization</h3>

<ul>
<li>Character Set Independent M17N
<ul>
<li>No conversion required</li>
<li>Unicode is not forced</li>
</ul></li>
<li>Basic implementation is done</li>
<li>But We Still Need Code Conversion API</li>
<li>&#8230; and some concerns left
<ul>
<li>e.g. string literals in extensions</li>
</ul></li>
</ul>

<h3>M17N Example</h3>

<div class="typocode"><pre><code class="typocode_ruby "><span class="constant">STDIN</span><span class="punct">.</span><span class="ident">encoding</span> <span class="punct">=</span> <span class="punct">&quot;</span><span class="string">EUC-JP;UTF-8</span><span class="punct">&quot;</span>
<span class="ident">likne</span> <span class="punct">=</span> <span class="constant">STDIN</span><span class="punct">.</span><span class="ident">gets</span>
<span class="ident">p</span> <span class="ident">line</span><span class="punct">.</span><span class="ident">encoding</span> <span class="comment"># =&gt; &quot;UTF-8&quot;</span>
<span class="ident">print</span> <span class="ident">line</span><span class="punct">.</span><span class="ident">encode</span><span class="punct">(&quot;</span><span class="string">Shift_JIS</span><span class="punct">&quot;)</span></code></pre></div>

<h3>Other Wild Ideas</h3>

<ul>
<li>allow splat (*) in the middle of arguments</li>
<li>split Module and Class (no inheritance)</li>
<li>$var as thread-local variable</li>
<li>BasicObject on top of Object</li>
<li>caller_binding</li>
<li>instance_exec</li>
</ul>

<h3>Thank you</h3>

<p>Slides will be avaliable at http://www.rubyist.net/~matz/slides/rc2005/
Any questions?</p>

<p>Q: can you explain instance_exec?</p>

<p>A: </p>

<p>instance_exec(1,2,3) { |a,b,c| &#8230; }</p>

<p>Sometimes we do want to pass a value to an exec block, because sometimes a block is given from outside.  That&#8217;s the reason we need instance_exec.</p>

<p>Q: Could we use an equivalent to this which doesn&#8217;t change self?</p>

<p>A: &#8230; You can say self.instance_eval explicitly.</p>

<p>Q: How do you do instance_exec() today?</p>

<p>A: In the Ruby list someone has defined a method with a random name, then it&#8217;s called, then the method name is removed.</p>

<p>Q: When will it be ready?</p>

<p>A: When its ready.</p>

<p>Thank you for enduring the long talk.</p>

<p>Bye now.</p>

  
  <p class="meta">Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/matzs-keynotes#comments">3 comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/16/matzs-keynotes#trackbacks">no trackbacks</a></p>
  </div>


  <p id="pagination">Older posts: <a href="/articles/page/1">1</a> ...  <a href="/articles/page/12">12</a> <a href="/articles/page/13">13</a> 14 <a href="/articles/page/15">15</a> <a href="/articles/page/16">16</a> <a href="/articles/page/17">17</a></p>

          <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
        </div>
        
        <div id="sidebar">
          
            <div id="search-results"></div>
            
              
      
<div class="sidebar-node">
  <h3>About</h3>
My name is Kevin Clark. I'm a <a href="http://ruby-lang.org">Ruby</a> hacker making awesome things at <a href="http://powerset.com">Powerset</a> in San Francisco.

</div>


      
<div class="sidebar-node">
  <h3>Understanding</h3>
<a href="http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols">Ruby Symbols</a><br />
<a href="http://glu.ttono.us/articles/2005/09/05/environments-in-rails-0-13-1">Environments in Rails 0.13.1</a><br />
<a href="http://glu.ttono.us/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a><br />
<a href="http://glu.ttono.us/articles/2005/10/30/why-and-how-ruby-and-rails-unit-testing">Ruby (and Rails) Unit Testing</a><br />
<a href="http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks">Rails Best Practices, Tips and Tricks</a><br />
<a href="http://glu.ttono.us/articles/2006/03/21/rails-for-designers">Rails for Designers</a><br />
<a href="http://glu.ttono.us/articles/2006/05/22/guide-environments-in-rails-1-1">Environments in Rails 1.1</a><br />
<a href="http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts">Test Driven RJS with ARTS</a>

</div>


      
<div class="sidebar-node">
  <h3>Cheat Sheets</h3>
<a href="http://glu.ttono.us/articles/2006/05/22/configuring-rails-environments-the-cheat-sheet">Configuring Rails Environments</a>

</div>


      
<div class="sidebar-node">
  <h3>Categories</h3>
<ul id="categories">
  
  <li><a href="/articles/category/web-dev">Web Dev</a> <em>(14)</em></li>
  
  
  <li><a href="/articles/category/coding">Coding</a> <em>(37)</em></li>
  
  
  <li><a href="/articles/category/rails">Rails</a> <em>(74)</em></li>
  
  
  <li><a href="/articles/category/op-ed">Op-Ed</a> <em>(7)</em></li>
  
  
  <li><a href="/articles/category/reviews">Reviews</a> <em>(3)</em></li>
  
  
  <li><a href="/articles/category/musings">Musings</a> <em>(18)</em></li>
  
  
  <li><a href="/articles/category/ruby">Ruby</a> <em>(69)</em></li>
  
  
  <li><a href="/articles/category/hacks">Hacks</a> <em>(22)</em></li>
  
  
  <li><a href="/articles/category/sdrug">sd.rb</a> <em>(10)</em></li>
  
  
  <li><a href="/articles/category/testing">testing</a> <em>(17)</em></li>
  
  
  <li><a href="/articles/category/documentation">documentation</a> <em>(6)</em></li>
  
  
  <li><a href="/articles/category/sightings">sightings</a> <em>(19)</em></li>
  
  
  <li><a href="/articles/category/guides">guides</a> <em>(8)</em></li>
  
  
  <li><a href="/articles/category/cheat-sheets">cheat sheets</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/business">business</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/summer-of-code">summer of code</a> <em>(5)</em></li>
  
</ul>


</div>


      
<div class="sidebar-node">
  <h3></h3>
<a href="http://feeds.feedburner.com/Gluttonous"><img src="http://feeds.feedburner.com/~fc/Gluttonous?bg=5189b5&amp;fg=333333&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>

</div>


      
<div class="sidebar-node">
  <h3></h3>
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->


</div>


  


            
            
            <a href="http://typo.leetsoft.com/" class="powered"><img alt="Powered" src="/images/powered.gif?1155250442" /></a>
            </div>

            <br clear="all" />
      </div>
      <div id="footer">
        <ul>
          <li><a href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0</a></li>
          <li><a href="http://jigsaw.w3.org/css-validator/validator?uri=http://glu.ttono.us/">Valid CSS</a></li>
        </ul>
      </div>
  </div>
<script type="text/javascript" src="http://tracker.measuremap.com/a/562"></script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-89073-1";
urchinTracker();
</script>
</body>
</html>


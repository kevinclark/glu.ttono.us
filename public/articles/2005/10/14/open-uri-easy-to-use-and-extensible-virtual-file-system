<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Gluttonous : open-uri, Easy-to-Use and Extensible Virtual File System</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta content="32.867098, -117.211597" name="ICBM" />
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://glu.ttono.us/xml/rsd" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/Gluttonous" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/Gluttonous" />
  <script src="/javascripts/cookies.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/prototype.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/effects.js?1155250443" type="text/javascript"></script>
  <script src="/javascripts/typo.js?1155250443" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="/stylesheets/theme/azure.css?1215021856" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/user-styles.css?1155250443" media="all" rel="Stylesheet" type="text/css" />
  <link href="/stylesheets/theme/print.css?1215021856" media="print" rel="Stylesheet" type="text/css" />
  <link href='http://www.myopenid.com/server' rel='openid.server' />
  <link href='http://kevinclark.myopenid.com/' rel='openid.delegate' />
</head>

<body>
  <div id="container" class="clearfix">
      <div id="header">
        <div id="logo">
          <h1 id="sitename"><a href="/">Gluttonous</a></h1>
          <h2 id="subtitle"></h2>
        </div>
      </div>
      
      <div id="search"> <form action="/articles/search" id="sform" method="get">
 <label for="q">Live Search:</label><input type="text" id="q" name="q" value="" size="15" />
<img alt="Spinner-blue" id="search_spinner" src="/images/spinner-blue.gif?1155250442" style="display:none;" />
</form>
<script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('search-results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_spinner')}, onLoading:function(request){Element.show('search_spinner')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script></div>
      

      <div id="content" class="clearfix">
        <div id="main">
          <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    trackback:ping="http://glu.ttono.us/articles/trackback/14"
    dc:title="open-uri, Easy-to-Use and Extensible Virtual File System"
    dc:identifier="http://glu.ttono.us/articles/2005/10/14/open-uri-easy-to-use-and-extensible-virtual-file-system"
    dc:description="Presented by Tanaka Akira akr at m17n dot org This one was really really fast.. here&amp;#8217;s what I got&amp;#8230; &amp;#8211; Kev Table of Contents Who am I? How to user open-uri Why open-uri? open-uri a"
    dc:creator="kevin"
    dc:date="2006-08-10T19:03:12-04:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="/admin/content/edit/14" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>open-uri, Easy-to-Use and Extensible Virtual File System</h2>
  <p class="auth">Posted by kev
  <span class="typo_date" title="Fri, 14 Oct 2005 21:55:00 GMT">Fri, 14 Oct 2005 21:55:00 GMT</span></p>
  <div id="adsense">
  <script type="text/javascript"><!--
google_ad_client = "pub-1730274975094059";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
google_ad_channel ="";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "5189B5";
google_color_url = "000000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
  </div>
  <p>Presented by Tanaka Akira
akr at m17n dot org</p>

<p>This one was really really fast.. here&#8217;s what I got&#8230; &#8211; Kev</p>

<p>Table of Contents</p>

<ul>
<li>Who am I?</li>
<li>How to user open-uri</li>
<li>Why open-uri?</li>
<li>open-uri and net/http</li>
<li>How to design easy-to-use api</li>
</ul>

<h3>Who am I</h3>

<h4>Who am I (1)</h4>

<p>The author of open-uri and several standard libraries:</p>

<p>open-uri.rb, pathname.rb, time.rb, pp.rb, prettyprint.rb, resolv.rv, resolv-replace.rb, tsort.rb</p>

<h4>Who am I (2)</h4>

<p>Contribution for various classes and methods</p>

<ul>
<li>IO without stdio</li>
<li>IO#read and readpartial</li>
<li>Time Time.utc, Time@utc_offset</li>
<li>allocate marsha1<em>dump marsha1</em>load</li>
<li>Regexp#top_s Regexp.union</li>
<li>Process.daemon</li>
<li>fork kills all other threads</li>
</ul>

<h4>Who am I (3)</h4>

<p>I report many bugs, over 100/year</p>

<ul>
<li>core dump</li>
<li>test failure</li>
<li>build problem</li>
<li>mismatch between doc. and imp.</li>
<li>etc</li>
</ul>

<h4>Who am I (4)</h4>

<p>I wrote several non-standard libraries.</p>

<ul>
<li>htree</li>
<li>webapp</li>
<li>amarshal</li>
</ul>

<h3>How to Use open-uri</h3>

<h4>Simple Usage</h4>

<p>require <code>open-uri</code>
open(&#8220;http://www.ruby-lang.org&#8221;) {
 |f|
 print f.read
}</p>

<h4>Similar to open files</h4>

<h3>Why Open-uri</h3>

<ul>
<li>Easy to use api</li>
<li>VFS: not only http</li>
</ul>

<h4>open-uri and net/http</h4>

<p>net/http has too many ways</p>

<ul>
<li>Net::HTTP.get_print</li>
<li>Net::HTTP.ge</li>
<li>Net::HTTP.start {|h| h.get} etc</li>
</ul>

<p>confuses users</p>

<h4>open-uri has Fewer ways</h4>

<p>open(uri) {|f| }
uri.open {|f| }
uri.read</p>

<p>Save user&#8217;s memory
reuse users knowledge</p>

<h4>net/http: get and print</h4>

<p>Net::HTTP.get_print( URI(&#8220;http://host&#8221;))
print Net::HTTP.get(URI(&#8220;http://host&#8221;))</p>

<h4>open-uri: get and print</h4>

<p>open(&#8220;http://host&#8221;) {|f|
  print f.read
}</p>

<p>print URI(&#8220;http://host&#8221;)&#8230;</p>

<h4>get and print</h4>

<p>net/http</p>

<ul>
<li>Net::HTTP.get_print print only</li>
<li>Net::HTTP.get: good</li>
</ul>

<p>open uri
&#8230;</p>

<h4>Why Easy?</h4>

<p>open(&#8220;http://host)</p>

<ul>
<li>No new construct </li>
<li>Users don&#8217;t need to learn</li>
</ul>

<p>open-uri respects user knowledge</p>

<h4>net/http: headers</h4>

<p>Net::HTTP.start(&#8220;host&#8221;) {|h|
r = h.get
&#8230;.
}</p>

<ul>
<li>No URI anymore</li>
<li>No Net::HTTP.get anymore</li>
<li>Net::HTTP.start, net.. and body used instead</li>
</ul>

<h4>open-uri headers</h4>

<ul>
<li>Still URI</li>
<li>still open method</li>
<li>Easy to use</li>
</ul>

<h4>net/http: SSL</h4>

<ul>
<li>Different library: net/https</li>
<li>Net:HTTP.new nad Net:HTTP.start</li>
<li>Different port</li>
<li>Server verification&#8230;</li>
</ul>

<h4>open-uri: SSL</h4>

<ul>
<li>Still URI</li>
<li>Still open method</li>
<li>Server verification by default</li>
<li>No new library</li>
<li>No new methods, few things to learn</li>
</ul>

<h4>net/http: proxy</h4>

<ul>
<li>New method: Net::HTTP::Proxy</li>
</ul>

<h4>open-uri: proxy</h4>

<p>% http_proxy = http://blah
% export http_proxy</p>

<ul>
<li>Conventional environemtn variable supported</li>
<li>No new methods. An user might know this already</li>
<li>Fewer things to learn</li>
</ul>

<h4>net/http: basic auth</h4>

<ul>
<li>New class: Net::HTTP::Get</li>
<li>New method: Net::HTTP#request</li>
</ul>

<h4>open-uri: basic auth</h4>

<ul>
<li>Still URI</li>
<li>Still open method</li>
<li>New option: :http<em>basic</em>authentication</li>
<li>No new methods, few things to learn</li>
</ul>

<h3>How to design Easy-to-Use API</h3>

<ul>
<li>Save brain power</li>
<li>Evolve gradually</li>
</ul>

<h4>Fewer Things to Learn</h4>

<ul>
<li>Fewer constructs for pragmatic usages</li>
<li>Huffman coding</li>
<li>DRY</li>
<li>No configuration is good ocnfiguration</li>
<li>Reuse user knowledge</li>
<li>Infrastructure friendly</li>
</ul>

<h4>Fewer Constructs for Pragmatic Usages</h4>

<p>*Open vs Net::HTTP.get, Net::HTTP#get etc</p>

<ul>
<li>This is not minimalism</li>
<li>The target of &#8220;fewer&#8221; is not all constructs</li>
</ul>

<p>Pragmatic usages should be supported by small constructs.</p>

<h4>Fewer Constructs(2)</h4>

<p>Diagram.. link later hopefully
Freqently use convenience methods, rarely use many primatives</p>

<h4>Ex. nethttp and open-uri</h4>

<p>Methods frequently used:
net/http: Net::HTTP.start, Net::HTTP#get
open-uri open</p>

<p>open-uri&#8217;s fewer constructs supports many more features</p>

<p>Huffman Coding</p>

<ul>
<li>Shorter for freqeuent things</li>
<li>Longer for rare things</li>
</ul>

<h4>Optimize for frequent things.</h4>

<p>Ex: p</p>

<p>So longer methods for rarely used things, shorter methods for frequently used things</p>

<h4>Ex p</h4>

<p><code>p obj</code></p>

<ul>
<li>Very frequently used</li>
<li>Bad name in common sense</li>
<li>Almost no problem because everyone knows</li>
</ul>

<h4>Ex. pp and y</h4>

<ul>
<li>Bad name in common sense</li>
<li>Problematic than <code>p</code> because not everyone knows</li>
</ul>

<h4>Ex. to<em>s and to</em>str</h4>

<ul>
<li>to_s shorter. frequently used.</li>
<li>to_str longer, used internally</li>
</ul>

<h4>Ex. def</h4>

<ul>
<li>def shorter, frequently used</li>
<li>define_method longer. not encouraged</li>
</ul>

<h4>Ex time.rb</h4>

<ul>
<li>Time.parse frequently used</li>
<li>Time.strptime generic, needs to learn the format.</li>
<li>Time.parse is less flexible but enough for most cases, and easy to learn</li>
</ul>

<h4>Candidates for Huffman Coding</h4>

<ul>
<li>Method name</li>
<li>Other name</li>
<li>Convenience method</li>
<li>Language syntax</li>
<li>etc</li>
</ul>

<h4>Length of Huffman Coding</h4>

<ul>
<li>Number of characters</li>
<li>Number of nodes in AST</li>
<li>Editor keystrokes</li>
<li>etc</li>
</ul>

<h4>Encourage Good Style</h4>

<ul>
<li>Programmers like short code</li>
<li>Short code should be designed as good style</li>
</ul>

<h3>DRY &#8211; Don&#8217;t repeat yourself</h3>

<p>Violations are common</p>

<h4>No Configuration is Good Configuration</h4>

<p>Things should work well out of box.</p>

<ul>
<li>SSL CA certs</li>
<li>http_proxy environment variable</li>
</ul>

<h4>Bad Examples</h4>

<ul>
<li>ext/iconv/config.charset</li>
<li>soap<em>use</em>proxy</li>
<li>require &#8220;irb/completion&#8221;</li>
<li>RUBYOPT=rubygems</li>
</ul>

<h4>Reuse User Knowledge</h4>

<p>oepn-uri reuse user knowledge</p>

<ul>
<li>open is used to access an external resource</li>
</ul>

<h4>Reusable Knowledge</h4>

<ul>
<li>Ruby builtin (popular) metho</li>
<li>consistency</li>
<li>Unix</li>
<li>Standards: POSIX, RFC, etc</li>
<li>Metaphor</li>
</ul>

<h4>Consitency</h4>

<ul>
<li>bang methods</li>
<li>each<em>with</em>index</li>
<li>etc</li>
</ul>

<p>Consistency violation:</p>

<ul>
<li>Time#utc is destructive</li>
</ul>

<h4>Metaphor</h4>

<ul>
<li>HTTP is a kind of network file system</li>
<li>oepn-uri doesn&#8217;t support beyond file system: POST, etc</li>
</ul>

<h4>Infrastructure Friendly</h4>

<ul>
<li>emacs, vi</li>
<li>line oriented tools</li>
<li>shell and file system</li>
<li>web browser</li>
</ul>

<p>Prefer</p>

<p>&#8220;It is easy using the legacy tool XXX&#8221; over &#8220;It is easy using the new tool YYY&#8221;</p>

<h3>Evolve Gradually</h3>

<ul>
<li>Adaptive Huffman coding</li>
<li>How to find bad API</li>
<li>How to avoid incompatability</li>
</ul>

<h4>Adaptive Huffman Coding</h4>

<p>What methods are used frequently?</p>

<ul>
<li>Long method name at first</li>
<li>Alias to short name later</li>
<li>Define convenience methods for idioms</li>
</ul>

<h4>Adaptive Huffman Coding(2)</h4>

<ul>
<li>Short names and operators should be used carefully</li>
<li>Use a long name if hesitate</li>
<li>Alias is not a bad thing (TMTOWTDI)</li>
<li>Primitives should have long names</li>
<li>Define new method for idiom</li>
</ul>

<h4>Operators</h4>

<ul>
<li>CGI#[] and CGI#params
<ul>
<li>CGI was defined unsuitably.</li>
</ul></li>
<li>Hash #[]
<ul>
<li>primitive: Hash#fetch</li>
</ul></li>
</ul>

<h4>How to find bad api</h4>

<ul>
<li>Repeated surprise</li>
<li>Often cannot remember</li>
</ul>

<h4>Repeated Surprise</h4>

<p>Example</p>

<ul>
<li>Time#utc is destructive</li>
<li>Iconv.iconv returns an array</li>
</ul>

<h4>Often Cannnot Remember</h4>

<p>Manual is required again and again for same issue.</p>

<ul>
<li>RubyUnit</li>
<li>optparse</li>
</ul>

<h4>Idiom</h4>

<ul>
<li>Repeated code</li>
<li>Violate DRY</li>
<li>An idiom may be good or bad</li>
</ul>

<p>Bad idiom example</p>

<ul>
<li>Iconv.iconv()[0]</li>
</ul>

<h4>How to Avoid Incompatibility</h4>

<p>Extension without Incompatibility:</p>

<ul>
<li>New method</li>
<li>New keyword argument</li>
<li>con contants</li>
</ul>

<p>Introducing new names has no compatability problem (in most case)</p>

<h4>Incompatible Change is a Bad Thing</h4>

<p>But fixing bad API&#8230;</p>

<h4>Incompatible Change</h4>

<p>API Migration Example</p>

<ul>
<li>net/http: API version</li>
<li>cgi: special implementation for transition period</li>
</ul>

<h4>net/http API version</h4>

<p>Net::HTTP has two APIs</p>

<ul>
<li>Ruby 1.6 API version 1.1</li>
<li>Ruby 1.8 API version 1.2</li>
</ul>

<h4>net.http: switch API version</h4>

<ul>
<li>It tens to forget restore API version</li>
<li>Global switch, not thread save</li>
</ul>

<h4>cgi: special implementation for a  transition period</h4>

<p>CGI#[] returns</p>

<ul>
<li>Ruby 1.6 an array of params</li>
<li>Ruby 1.8: Transition period</li>
<li>future? : a first parameter or nil</li>
</ul>

<h4>CGI#[] returns something tweaked on 1.8</h4>

<p>Try to work as both Array and String</p>

<ul>
<li>Ruby 1.8.0 subclass of String</li>
<li>Ruby 1.8.1 subclass of DelegateClass(String)</li>
<li>Ruby 1.8.2 &#8230;</li>
</ul>

<h4>fork: Warning after change</h4>

<p>Does fork kill other threads in child process?####</p>

<ul>
<li>Ruby 1.6: No</li>
<li>Ruby 1.8: Yes</li>
</ul>

<h4>fork: warning after change</h4>

<ul>
<li>Ruby 1.6: No warning</li>
<li>Ruby 1.8.0: No warning</li>
<li>Ruby: 1.8.1: warning: fork terminates thread</li>
<li>Ruby: 1.8.2: No warning</li>
</ul>

<h4>IO#read: warning before change</h4>

<p>IO#read will block even if O_NONBLOCK is set</p>

<ul>
<li>Ruby 1.8: doesn&#8217;t block</li>
<li><p>Ruby 1.9: does block</p></li>
<li><p>Ruby 1.8.2: No warning</p></li>
<li>Ruby 1.8.3: Warning</li>
<li>Ruby 1.9 : No warning</li>
</ul>

<h3>Easy-to-Use vs Security</h3>

<h4>Easy to Use vs Sec</h4>

<ul>
<li>HTTP_PROXY</li>
<li>http://user:pass@host/</li>
<li>redirection and taint</li>
<li>File.open(uri)</li>
</ul>

<h3>VFS: Virtual File System</h3>

<h4>Why VFS?</h4>

<p>Typical simple program</p>

<ul>
<li>Load na external resource</li>
<li>Process the resource</li>
<li>Store the result
VFS ease the first step.</li>
</ul>

<h4>What is VFS</h4>

<p>VFS provides</p>

<ul>
<li>open a http/ftp resource</li>
<li>read a resource
&#8230;
&#8230;</li>
</ul>

<h4>VFS and polymorphism</h4>

<p>The polymorphism can be implemented by</p>

<ul>
<li>usual method dispatch calls
&#8230;.</li>
</ul>

<h4>Polymorphic open</h4>

<p>If open-uri is in effect
*open(&#8220;http://&#8230;&#8221;) calls URI(&#8220;http://&#8230;&#8221;).open</p>

<ul>
<li>same for ftp etc</li>
</ul>

<p>Any URI can be opened if the URI has open method</p>

<h4>Other Resources</h4>

<p>LDAP</p>

<h4>Other Operations</h4>

<ul>
<li>URI().read</li>
<li>Other operations should be defined for polymorphic to Pathname future</li>
</ul>

<h4>Sec Considerations</h4>

<ul>
<li>open(&#8220;|&#8230;&#8221;)</li>
<li>File.open is not affected</li>
</ul>

<h4>Summary</h4>

<ul>
<li>How to design Easy-To_Use API
<ul>
<li>Save brain power</li>
<li>Evolve gradually</li>
</ul></li>
<li>VFS by open-uri</li>
</ul>

<h3>Q/A</h3>

<p>Some guy writing a book: Should I teach Array.push or Array&lt;<? Experts are going to use a condensed short form, but they'll need to use it. Do you have advice for people writing apis to write code so its easier to read.</p>

<p>Response: I think the api should lean towards teaching.</p>

<p>DHH: Are you going to do what you&#8217;re reading for writing?</p>

<p>Response: POST should be supproted in the future, but write.. eh.. not as useful.</p>

<p>AC: Warning would be more useful -not- at runtime..
Response: Inaudible</p>
</div>
<p class="meta">
  Posted in <a href="/articles/category/coding" rel="tag">Coding</a>, <a href="/articles/category/ruby" rel="tag">Ruby</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/14/open-uri-easy-to-use-and-extensible-virtual-file-system#comments">no comments</a>&nbsp;<strong>|</strong>&nbsp;<a href="/articles/2005/10/14/open-uri-easy-to-use-and-extensible-virtual-file-system#trackbacks">no trackbacks</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <ol class="comment-list" id="commentList">
  
    <li id="dummy_comment" style="display: none"></li>
  
  </ol>

  <a name="trackbacks"></a><h4 class="blueblk">Trackbacks</h4>
  <p>
    Use the following link to trackback from your own site:<br/>
    <span class="light-bg">http://glu.ttono.us/articles/trackback/14</span>
    </p>
  

<p class="postmetadata alt">
  <small>
  <a href="http://glu.ttono.us/xml/rss20/article/14/feed.xml" title="RSS Feed">RSS feed for this post</a>
  <a href="http://glu.ttono.us/articles/trackback/14" >trackback uri</a>
  </small>
</p>

  <p>Comments are disabled</p>

<script type="text/javascript"><!--
if(!mmposts){var mmposts=[];}mmposts[mmposts.length]="14";
//--></script>
<!-- mmp mmid:14 mmdate:2005-10-14 17:55:00 mmurl:/articles/2005/10/14/open-uri-easy-to-use-and-extensible-virtual-file-system mmtitle:open-uri, Easy-to-Use and Extensible Virtual File System -->
<script src="http://feeds.feedburner.com/~s/Gluttonous?i=http://glu.ttono.us/articles/2005/10/14/open-uri-easy-to-use-and-extensible-virtual-file-system" type="text/javascript" charset="utf-8"></script>

          <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
        </div>
        
        <div id="sidebar">
          
            <div id="search-results"></div>
            
              
      
<div class="sidebar-node">
  <h3>About</h3>
My name is Kevin Clark. I'm a <a href="http://ruby-lang.org">Ruby</a> hacker making awesome things at <a href="http://powerset.com">Powerset</a> in San Francisco.

</div>


      
<div class="sidebar-node">
  <h3>Understanding</h3>
<a href="http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols">Ruby Symbols</a><br />
<a href="http://glu.ttono.us/articles/2005/09/05/environments-in-rails-0-13-1">Environments in Rails 0.13.1</a><br />
<a href="http://glu.ttono.us/articles/2005/10/27/the-joy-of-migrations">The Joy of Migrations</a><br />
<a href="http://glu.ttono.us/articles/2005/10/30/why-and-how-ruby-and-rails-unit-testing">Ruby (and Rails) Unit Testing</a><br />
<a href="http://glu.ttono.us/articles/2006/02/06/rails-best-practices-tips-and-tricks">Rails Best Practices, Tips and Tricks</a><br />
<a href="http://glu.ttono.us/articles/2006/03/21/rails-for-designers">Rails for Designers</a><br />
<a href="http://glu.ttono.us/articles/2006/05/22/guide-environments-in-rails-1-1">Environments in Rails 1.1</a><br />
<a href="http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts">Test Driven RJS with ARTS</a>

</div>


      
<div class="sidebar-node">
  <h3>Cheat Sheets</h3>
<a href="http://glu.ttono.us/articles/2006/05/22/configuring-rails-environments-the-cheat-sheet">Configuring Rails Environments</a>

</div>


      
<div class="sidebar-node">
  <h3>Categories</h3>
<ul id="categories">
  
  <li><a href="/articles/category/web-dev">Web Dev</a> <em>(14)</em></li>
  
  
  <li><a href="/articles/category/coding">Coding</a> <em>(37)</em></li>
  
  
  <li><a href="/articles/category/rails">Rails</a> <em>(74)</em></li>
  
  
  <li><a href="/articles/category/op-ed">Op-Ed</a> <em>(7)</em></li>
  
  
  <li><a href="/articles/category/reviews">Reviews</a> <em>(3)</em></li>
  
  
  <li><a href="/articles/category/musings">Musings</a> <em>(18)</em></li>
  
  
  <li><a href="/articles/category/ruby">Ruby</a> <em>(69)</em></li>
  
  
  <li><a href="/articles/category/hacks">Hacks</a> <em>(22)</em></li>
  
  
  <li><a href="/articles/category/sdrug">sd.rb</a> <em>(10)</em></li>
  
  
  <li><a href="/articles/category/testing">testing</a> <em>(17)</em></li>
  
  
  <li><a href="/articles/category/documentation">documentation</a> <em>(6)</em></li>
  
  
  <li><a href="/articles/category/sightings">sightings</a> <em>(19)</em></li>
  
  
  <li><a href="/articles/category/guides">guides</a> <em>(8)</em></li>
  
  
  <li><a href="/articles/category/cheat-sheets">cheat sheets</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/business">business</a> <em>(1)</em></li>
  
  
  <li><a href="/articles/category/summer-of-code">summer of code</a> <em>(5)</em></li>
  
</ul>


</div>


      
<div class="sidebar-node">
  <h3></h3>
<a href="http://feeds.feedburner.com/Gluttonous"><img src="http://feeds.feedburner.com/~fc/Gluttonous?bg=5189b5&amp;fg=333333&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>

</div>


      
<div class="sidebar-node">
  <h3></h3>
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->


</div>


  


            
            
            <a href="http://typo.leetsoft.com/" class="powered"><img alt="Powered" src="/images/powered.gif?1155250442" /></a>
            </div>

            <br clear="all" />
      </div>
      <div id="footer">
        <ul>
          <li><a href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0</a></li>
          <li><a href="http://jigsaw.w3.org/css-validator/validator?uri=http://glu.ttono.us/">Valid CSS</a></li>
        </ul>
      </div>
  </div>
<script type="text/javascript" src="http://tracker.measuremap.com/a/562"></script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-89073-1";
urchinTracker();
</script>
</body>
</html>

